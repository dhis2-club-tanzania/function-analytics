!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("lodash")):"function"==typeof define&&define.amd?define("function-analytics",["lodash"],t):"object"==typeof exports?exports["function-analytics"]=t(require("lodash")):e["function-analytics"]=t(e._)}("undefined"!=typeof self?self:this,function(e){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=30)}([function(t,r){t.exports=e},function(e,t,r){"use strict";var n=r(5),i=r(15),a=Object.prototype.toString;function s(e){return"[object Array]"===a.call(e)}function o(e){return null!==e&&"object"==typeof e}function h(e){return"[object Function]"===a.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:o,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:h,isStream:function(e){return o(e)&&h(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,i=arguments.length;n<i;n++)c(arguments[n],r);return t},deepMerge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]="object"==typeof r?e({},r):r}for(var n=0,i=arguments.length;n<i;n++)c(arguments[n],r);return t},extend:function(e,t,r){return c(t,function(t,i){e[i]=r&&"function"==typeof t?n(t,r):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){"use strict";(function(e){r.d(t,"a",function(){return h});var n=r(12),i=r.n(n),a=r(3),s=r.n(a);let o;class h{static initiateRunner(e){h.instance||(this.config=e,this.cache={},o=this)}get instance(){return o}set config(e){this.config=e}get config(){return this.config}_fetch(e,t,r){if(!o){throw Error('Configuration not set please configure function analytics eg {baseUrl:"dhis_base_url", username:"username", password:"password"}')}let n=e.hash();if(o.cache[n])o.cache[n].finished?t(e.performPostProcess(JSON.parse(JSON.stringify(o.cache[n].data)))):o.cache[n].resolutions.push(t);else{o.cache[n]={finished:!1,resolutions:[]};const a={url:o.config.baseUrl+e.url,method:"get",adapter:s.a};o.config.username&&o.config.password&&(a.auth={username:o.config.username,password:o.config.password}),i.a.request(a).then(r=>{o.cache[n].data=r.data,t(e.performPostProcess(JSON.parse(JSON.stringify(o.cache[n].data)))),o.cache[n].resolutions.forEach(t=>{t(e.performPostProcess(JSON.parse(JSON.stringify(o.cache[n].data))))}),o.cache[n].finished=!0},e=>{r(e)})}}getResults(e){return e._fetchers?this.getAllResults(e):new Promise((t,r)=>{e.hasDependencies()?e.getDependecyFetchResults().then(()=>{e.performPreProcess(),this._fetch(e,t,r)}).catch(e=>{console.log(e),r()}):this._fetch(e,t,r)})}getAllResults(e){return new Promise((t,r)=>{const n=e.fetchers.map(e=>(new h).getResults(e));return Promise.all(n).then(r=>{t(e.performPostProcess(r))}).catch(e=>{r(e)})})}}}).call(this,r(4))},function(e,t,r){"use strict";var n=r(1),i=r(21),a=r(6),s=r(23),o=r(24),h=r(9);e.exports=function(e){return new Promise(function(t,c){var l=e.data,u=e.headers;n.isFormData(l)&&delete u["Content-Type"];var d=new XMLHttpRequest;if(e.auth){var f=e.auth.username||"",m=e.auth.password||"";u.Authorization="Basic "+btoa(f+":"+m)}if(d.open(e.method.toUpperCase(),a(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in d?s(d.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:r,config:e,request:d};i(t,c,n),d=null}},d.onabort=function(){d&&(c(h("Request aborted",e,"ECONNABORTED",d)),d=null)},d.onerror=function(){c(h("Network Error",e,null,d)),d=null},d.ontimeout=function(){c(h("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},n.isStandardBrowserEnv()){var p=r(25),y=(e.withCredentials||o(e.url))&&e.xsrfCookieName?p.read(e.xsrfCookieName):void 0;y&&(u[e.xsrfHeaderName]=y)}if("setRequestHeader"in d&&n.forEach(u,function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete u[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),c(e),d=null)}),void 0===l&&(l=null),d.send(l)})}},function(e,t){var r,n,i=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function o(e){if(r===setTimeout)return setTimeout(e,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:a}catch(e){r=a}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(e){n=s}}();var h,c=[],l=!1,u=-1;function d(){l&&h&&(l=!1,h.length?c=h.concat(c):u=-1,c.length&&f())}function f(){if(!l){var e=o(d);l=!0;for(var t=c.length;t;){for(h=c,c=[];++u<t;)h&&h[u].run();u=-1,t=c.length}h=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function p(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new m(e,t)),1!==c.length||l||o(f)},m.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=p,i.addListener=p,i.once=p,i.off=p,i.removeListener=p,i.removeAllListeners=p,i.emit=p,i.prependListener=p,i.prependOnceListener=p,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},function(e,t,r){"use strict";var n=r(1);function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var a;if(r)a=r(t);else if(n.isURLSearchParams(t))a=t.toString();else{var s=[];n.forEach(t,function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),s.push(i(t)+"="+i(e))}))}),a=s.join("&")}if(a){var o=e.indexOf("#");-1!==o&&(e=e.slice(0,o)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";(function(t){var n=r(1),i=r(20),a={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var o,h={adapter:(void 0!==t&&"[object process]"===Object.prototype.toString.call(t)?o=r(3):"undefined"!=typeof XMLHttpRequest&&(o=r(3)),o),transformRequest:[function(e,t){return i(t,"Accept"),i(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};h.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],function(e){h.headers[e]={}}),n.forEach(["post","put","patch"],function(e){h.headers[e]=n.merge(a)}),e.exports=h}).call(this,r(4))},function(e,t,r){"use strict";var n=r(22);e.exports=function(e,t,r,i,a){var s=new Error(e);return n(s,t,r,i,a)}},function(e,t,r){"use strict";var n=r(1);e.exports=function(e,t){t=t||{};var r={};return n.forEach(["url","method","params","data"],function(e){void 0!==t[e]&&(r[e]=t[e])}),n.forEach(["headers","auth","proxy"],function(i){n.isObject(t[i])?r[i]=n.deepMerge(e[i],t[i]):void 0!==t[i]?r[i]=t[i]:n.isObject(e[i])?r[i]=n.deepMerge(e[i]):void 0!==e[i]&&(r[i]=e[i])}),n.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],function(n){void 0!==t[n]?r[n]=t[n]:void 0!==e[n]&&(r[n]=e[n])}),r}},function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t,r){e.exports=r(14)},function(e,t,r){"use strict";const n=Symbol?Symbol():"__listeners";class i extends Promise{constructor(e){super((t,r)=>e(t,r,e=>{try{return this[n].forEach(t=>t(e))}catch(e){r(e)}})),this[n]=[]}progress(e){if("function"!=typeof e)throw new Error("PROGRESS_REQUIRES_FUNCTION");return this[n].push(e),this}static all(e){const t=new Array(e.length),r=e.length;let n=0;return new i((i,a,s)=>{e.forEach((e,o)=>{e.then(e=>{t[o]=e,t.proportion=++n/r,s(t),n===r&&i(t)}).catch(a)})})}static sequence(e,t){const r=[],n=e.length;let a=0;return new i((i,s,o)=>{!function h(){t.call(null,e[r.length]).then(e=>{r.push(e),r.proportion=++a/n,o(r),r.length===n?i(r):h()}).catch(s)}()})}}e.exports=i},function(e,t,r){"use strict";var n=r(1),i=r(5),a=r(16),s=r(10);function o(e){var t=new a(e),r=i(a.prototype.request,t);return n.extend(r,a.prototype,t),n.extend(r,t),r}var h=o(r(8));h.Axios=a,h.create=function(e){return o(s(h.defaults,e))},h.Cancel=r(11),h.CancelToken=r(28),h.isCancel=r(7),h.all=function(e){return Promise.all(e)},h.spread=r(29),e.exports=h,e.exports.default=h},function(e,t){function r(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(r(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&r(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,r){"use strict";var n=r(1),i=r(6),a=r(17),s=r(18),o=r(10);function h(e){this.defaults=e,this.interceptors={request:new a,response:new a}}h.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=o(this.defaults,e)).method=e.method?e.method.toLowerCase():"get";var t=[s,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)r=r.then(t.shift(),t.shift());return r},h.prototype.getUri=function(e){return e=o(this.defaults,e),i(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],function(e){h.prototype[e]=function(t,r){return this.request(n.merge(r||{},{method:e,url:t}))}}),n.forEach(["post","put","patch"],function(e){h.prototype[e]=function(t,r,i){return this.request(n.merge(i||{},{method:e,url:t,data:r}))}}),e.exports=h},function(e,t,r){"use strict";var n=r(1);function i(){this.handlers=[]}i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){n.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=i},function(e,t,r){"use strict";var n=r(1),i=r(19),a=r(7),s=r(8),o=r(26),h=r(27);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!o(e.url)&&(e.url=h(e.baseURL,e.url)),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),n.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||s.adapter)(e).then(function(t){return c(e),t.data=i(t.data,t.headers,e.transformResponse),t},function(t){return a(t)||(c(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,r){"use strict";var n=r(1);e.exports=function(e,t,r){return n.forEach(r,function(r){e=r(e,t)}),e}},function(e,t,r){"use strict";var n=r(1);e.exports=function(e,t){n.forEach(e,function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])})}},function(e,t,r){"use strict";var n=r(9);e.exports=function(e,t,r){var i=r.config.validateStatus;!i||i(r.status)?e(r):t(n("Request failed with status code "+r.status,r.config,null,r.request,r))}},function(e,t,r){"use strict";e.exports=function(e,t,r,n,i){return e.config=t,r&&(e.code=r),e.request=n,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,r){"use strict";var n=r(1),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,a,s={};return e?(n.forEach(e.split("\n"),function(e){if(a=e.indexOf(":"),t=n.trim(e.substr(0,a)).toLowerCase(),r=n.trim(e.substr(a+1)),t){if(s[t]&&i.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([r]):s[t]?s[t]+", "+r:r}}),s):s}},function(e,t,r){"use strict";var n=r(1);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function i(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=i(window.location.href),function(t){var r=n.isString(t)?i(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var n=r(1);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,i,a,s){var o=[];o.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&o.push("expires="+new Date(r).toGMTString()),n.isString(i)&&o.push("path="+i),n.isString(a)&&o.push("domain="+a),!0===s&&o.push("secure"),document.cookie=o.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var n=r(11);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var r=this;e(function(e){r.reason||(r.reason=new n(e),t(r.reason))})}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i(function(t){e=t}),cancel:e}},e.exports=i},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){"use strict";r.r(t);var n=r(2);class i{constructor(){this.postProcessors=[],this.dependencies=[]}hasDependencies(){return this.dependencies.length>0}preProcess(e){return this.dependencies.push(e),this}addPreProcess(e){return this.dependencies.push(e),this}postProcess(e){return this.postProcessors.push(e),this}addPostProcess(e){return this.postProcessors.push(e),this}performPreProcess(){return this.dependencies.forEach(e=>{e.processCallback(e.process._results,this)}),this}performPostProcess(e){this._results=e;let t=e;return this.postProcessors.forEach(e=>{t=e(t)}),t}}var a=r(13),s=r.n(a);class o extends i{constructor(){super(),this.parameters={}}get _urlParameters(){let e="";return Object.keys(this.parameters).forEach(t=>{""!==e&&(e+="&"),"string"==typeof this.parameters[t]?e+=t+"="+this.parameters[t]:Object.keys(this.parameters[t]).forEach(r=>{""!==e&&(e+="&"),""===this.parameters[t][r]?e+=t+"="+r:e+=t+"="+r+":"+this.parameters[t][r]})}),e}get url(){throw new Error("Should implement url generation")}get(){return(new n.a).getResults(this)}setParameters(e){return Object.keys(e).forEach(t=>{this.parameters[t]=e[t]}),this}getDependecyFetchResults(){const e=this.dependencies.map(e=>(new n.a).getResults(e.process));return s.a.all(e)}_encode64(e){return btoa(new Uint8Array(e).reduce((e,t)=>e+String.fromCharCode(t),""))}hash(){return this.url}}class h{constructor(e,t,r){this.row=e,this.headers=t,this.metaData=r}dimension(e){var t=-1,r="";return this.headers.forEach((r,n)=>{r.name===e&&(t=n)}),this.metaData.names?r=this.metaData.names[this.row[t]]:this.metaData.items&&(r=this.metaData.items[this.row[t]]?this.metaData.items[this.row[t]].name:void 0),{id:this.row[t],name:r,path:this.metaData.ouHierarchy&&void 0!==this.metaData.ouHierarchy[this.row[t]]?this.metaData.ouHierarchy[this.row[t]]:void 0}}get dx(){return this.dimension("dx")}get pe(){return this.dimension("pe")}get ou(){return this.dimension("ou")}get value(){return this.dimension("value").id}}class c extends Array{constructor(e){super(...e),Object.setPrototypeOf(this,Object.create(c.prototype))}get dx(){return this.getHeader("dx")}get pe(){return this.getHeader("pe")}get ou(){return this.getHeader("ou")}get value(){return this.getHeader("value")}getHeader(e){let t;return this.forEach((r,n)=>{r.name===e&&((t=r).index=n)}),t}}class l{constructor(e){this._data=e}get headers(){return new c(this._data.headers)}get metaData(){return this._data.metaData}get rows(){let e=[];return this._data.rows.forEach(t=>{e.push(new h(t,this.headers,this.metaData))}),e}getDimensionDetailsByName(e){var t=[];return this.metaData.dimensions&&this.metaData.dimensions[e].forEach(e=>{t.push(this.getDimensionDetails(e))}),t}get rows(){let e=[];return this._data.rows.forEach(t=>{e.push(new h(t,this.headers,this.metaData))}),e}getDimensionDetails(e){var t="";return this.metaData.names?t=this.metaData.names[e]:this.metaData.items&&(t=this.metaData.items[e]?this.metaData.items[e].name:void 0),{id:e,name:t,path:this.metaData.ouHierarchy&&void 0!==this.metaData.ouHierarchy[e]?this.metaData.ouHierarchy[e]:void 0}}get height(){return this._data.height}get width(){return this._data.width}}class u extends o{constructor(e=25){super(),"boolean"==typeof e&&(e=e?25:26),this.parameters.dimension={},this.postProcess(t=>this.standardizeAnalytics(t,e))}setData(e){return this.setDimension("dx",e),this}setPeriod(e){return this.setDimension("pe",e),this}setOrgUnit(e){return this.setDimension("ou",e),this}setSelections(e){return this.setPeriod(e.pe),this.setOrgUnit(e.ou),void 0!==e.rule.json.data&&this.setData(e.rule.json.data),void 0!==e.dimensions&&Array.isArray(e.dimensions)&&e.dimensions.forEach(function(e){if(Array.isArray(e.items)){let t="";e.items.forEach(function(e){t.length>0?t+=";"+e:t+=e}),this.setDimension(e.id,t)}}),this}setDimension(e,t){return this.parameters.dimension[e]=t||"",this}standardizeAnalytics(e,t=25){if("boolean"==typeof t&&(t=t?25:26),e.count)return e;let r={headers:[],metaData:{dimensions:{},names:{},dx:[],pe:[],ou:[],co:[]},rows:[]};if(e){if(e.headers&&e.headers.forEach(e=>{try{let t=e;r.headers.push(t)}catch(e){console.warn("Invalid header object")}}),e.metaData)try{let n=this.getSanitizedAnalyticsMetadata(e.metaData,t);r.metaData=n}catch(e){console.warn("Invalid metadata object")}e.rows&&(r.rows=e.rows)}return r.height=e.height,r.width=e.width,new l(r)}getSanitizedAnalyticsMetadata(e,t){let r={};return e&&(e.ouHierarchy&&(r.ouHierarchy=e.ouHierarchy),t<26?(r.names={},e.names?r.names=e.names:e.items&&Object.keys(e.items).forEach(t=>{r.names[t]=e.items[t].name}),e.dimensions&&Object.keys(e.dimensions).forEach(t=>{r[t]=e.dimensions[t]})):(r.items={},e.items?r.items=e.items:e.names&&Object.keys(e.items).forEach(t=>{e.items[t]={name:e.names[t]}}),e.dimensions?r.dimensions=e.dimensions:(r.dimensions={},Object.keys(e).forEach(t=>{-1===["names","items","dimensions"].indexOf(t)&&(r.dimensions[t]=e[t])})))),r}get url(){return"analytics?"+this._urlParameters}}class d extends o{constructor(e){super(),this._fetchers=e}get fetchers(){return this._fetchers}get(){return(new n.a).getAllResults(this)}}var f=r(0);class m{constructor(e,t,r,n){if(this._calendar=e,this._year=t,this._month=r,this._day=n,0===this._calendar._validateLevel&&!this._calendar.isValid(this._year,this._month,this._day))throw this._calendar._invalids.invalidDate.replace(/\{0\}/,this._calendar.name)}newDate(e,t,r){return this._calendar.newDate(null==e?this:e,t,r)}year(e){return 0===arguments.length?this._year:this.set(e,"y")}month(e){return 0===arguments.length?this._month:this.set(e,"m")}day(e){return 0===arguments.length?this._day:this.set(e,"d")}date(e,t,r){if(!this._calendar.isValid(e,t,r))throw this._calendar._invalids.invalidDate.replace(/\{0\}/,this._calendar.name);return this._year=e,this._month=t,this._day=r,this}add(e,t){return this._calendar.add(this,e,t)}set(e,t){return this._calendar.set(this,e,t)}compareTo(e){let t=this._year-e._year;if(this._year===e._year&&(t=this._day-e._day,this._month!==e._month&&(t=this.monthOfYear()-e.monthOfYear())),this._calendar.name!==e._calendar.name)throw this._calendar._invalids.differentCalendars.replace(/\{0\}/,this._calendar.name).replace(/\{1\}/,e._calendar.name);return 0===t?0:t<0?-1:1}toJD(){return this._calendar.toJD(this)}fromJD(e){return this._calendar.fromJD(e)}toJSDate(){return this._calendar.toJSDate(this)}fromJSDate(e){return this._calendar.fromJSDate(e)}pad(e,t){return"000000".substring(0,t-(e=""+e).length)+e}toString(){return(this.year()<0?"-":"")+this.pad(Math.abs(this.year()),4)+"-"+this.pad(this.month(),2)+"-"+this.pad(this.day(),2)}leapYear(){return this._calendar.leapYear(this)}epoch(){return this._calendar.epoch(this)}formatYear(){return this._calendar.formatYear(this)}monthOfYear(){return this._calendar.monthOfYear(this)}weekOfYear(){return this._calendar.weekOfYear(this)}daysInYear(){return this._calendar.daysInYear(this)}dayOfYear(){return this._calendar.dayOfYear(this)}daysInMonth(){return this._calendar.daysInMonth(this)}dayOfWeek(){return this._calendar.dayOfWeek(this)}weekDay(){return this._calendar.weekDay(this)}extraInfo(){return this._calendar.extraInfo(this)}calendar(){return this._calendar}}class p{constructor(){this._validateLevel=0,this._name="",this._hasYearZero=!1,this._minMonth=1,this._minDay=1,this._epochs=["BCE","CE"],this._firstMonth=1,this._invalids={invalidCalendar:"Calendar {0} not found",invalidDate:"Invalid {0} date",invalidMonth:"Invalid {0} month",invalidYear:"Invalid {0} year",differentCalendars:"Cannot mix {0} and {1} dates"}}_validate(e,t,r,n){if(e.year)return e;try{if(this._validateLevel++,1===this._validateLevel&&!this.isValid(e,t,r))throw n.replace(/\{0\}/,this._name);const i=this.newDate(e,t,r);return this._validateLevel--,i}catch(e){throw this._validateLevel--,e}}isValid(e,t,r){this._validateLevel++;let n=this._hasYearZero||0!==e;if(n){const i=this.newDate(e,t,this._minDay);n=t>=this._minMonth&&t-this._minMonth<this.monthsInYear(i)&&r>=this._minDay&&r-this._minDay<=this.daysInMonth(i)}return this._validateLevel--,n}newDate(e,t,r){return e?(e.year&&(this._validate(e,t,r,this._invalids.invalidDate),r=e.day(),t=e.month(),e=e.year()),new m(this,e,t,r)):this.today()}today(){return this.fromJSDate(new Date)}fromJSDate(e){return this.fromJD(this.fromJSDate(e).toJD())}toJSDate(e,t,r){const n=this._validate(e,t,r,this._invalids.invalidDate);return this.fromJD(this.toJD(n)).toJSDate()}pad(e,t){return"000000".substring(0,t-(e=""+e).length)+e}formatYear(e){const t=this._validate(e,this._minMonth,this._minDay,this._invalids.invalidYear);return(t.year()<0?"-":"")+this.pad(Math.abs(t.year()),4)}epoch(e){return this._validate(e,this._minMonth,this._minDay,this._invalids.invalidYear).year()<0?this._epochs[0]:this._epochs[1]}monthsInYear(e){return this._validate(e,this._minMonth,this._minDay,this._invalids.invalidYear),12}monthOfYear(e,t){var r=this._validate(e,t,this._minDay,this._invalids.invalidMonth);return(r.month()+this.monthsInYear(r)-this._firstMonth)%this.monthsInYear(r)+this._minMonth}fromMonthOfYear(e,t){var r=(t+this._firstMonth-2*this._minMonth)%this.monthsInYear(e)+this._minMonth;return this._validate(e,r,this._minDay,this._invalids.invalidMonth),r}daysInYear(e){var t=this._validate(e,this._minMonth,this._minDay,this._invalids.invalidYear);return this.leapYear(t)?366:365}dayOfYear(e,t,r){var n=this._validate(e,t,r,this._invalids.invalidDate);return n.toJD()-this.newDate(n.year(),this.fromMonthOfYear(n.year(),this._minMonth),this._minDay).toJD()+1}daysInWeek(){return 7}dayOfWeek(e,t,r){var n=this._validate(e,t,r,this._invalids.invalidDate);return(Math.floor(this.toJD(n))+2)%this.daysInWeek()}extraInfo(e,t,r){return this._validate(e,t,r,this._invalids.invalidDate),{}}add(e,t,r){return this._validate(e,this._minMonth,this._minDay,this._invalids.invalidDate),this._correctAdd(e,this._add(e,t,r),t,r)}_add(e,t,r){if(this._validateLevel++,"d"===r||"w"===r){const n=e.fromJD(e.toJD()+t*("w"===r?this.daysInWeek():1));return this._validateLevel--,[n.year(),n.month(),n.day()]}try{const n=e.year()+("y"===r?t:0),i=e.monthOfYear()+("m"===r?t:0),a=e.day(),s=e=>{for(;i<e.minMonth;)n--,i+=e.monthsInYear(n);const t=e.monthsInYear(n);for(;i>t-1+e.minMonth;)n++,i-=t,t=e.monthsInYear(n)};"y"===r?(e.month()!==this.fromMonthOfYear(n,i)&&(i=this.newDate(n,e.month(),this._minDay).monthOfYear()),i=Math.min(i,this.monthsInYear(n)),a=Math.min(a,this.daysInMonth(n,this.fromMonthOfYear(n,i)))):"m"===r&&(s(this),a=Math.min(a,this.daysInMonth(n,this.fromMonthOfYear(n,i))));const o=[n,this.fromMonthOfYear(n,i),a];return this._validateLevel--,o}catch(e){throw this._validateLevel--,e}}_correctAdd(e,t,r,n){if(!(this._hasYearZero||"y"!==n&&"m"!==n||0!==t[0]&&e.year()>0==t[0]>0)){const i={y:[1,1,"y"],m:[1,this.monthsInYear(-1),"m"],w:[this.daysInWeek(),this.daysInYear(-1),"d"],d:[1,this.daysInYear(-1),"d"]}[n],a=r<0?-1:1;t=this._add(e,r*i[0]+a*i[1],i[2])}return e.date(t[0],t[1],t[2])}set(e,t,r){this._validate(e,this._minMonth,this._minDay,this._invalids.invalidDate);const n="y"===r?t:e.year(),i="m"===r?t:e.month(),a="d"===r?t:e.day();return"y"!==r&&"m"!==r||(a=Math.min(a,this.daysInMonth(n,i))),e.date(n,i,a)}toJD(e,t,r){const n=this._validate(e,t,r,this._invalids.invalidDate);e=n.year(),t=n.month(),r=n.day(),e<0&&e++,t<3&&(t+=12,e--);const i=Math.floor(e/100),a=2-i+Math.floor(i/4);return Math.floor(365.25*(e+4716))+Math.floor(30.6001*(t+1))+r+a-1524.5}fromJD(e){const t=Math.floor(e+.5),r=Math.floor((t-1867216.25)/36524.25);r=t+1+r-Math.floor(r/4);const n=r+1524,i=Math.floor((n-122.1)/365.25),a=Math.floor(365.25*i),s=Math.floor((n-a)/30.6001),o=n-a-Math.floor(30.6001*s),h=s-(s>13.5?13:1),c=i-(h>2.5?4716:4715);return c<=0&&c--,this.newDate(c,h,o)}}class y extends p{constructor(){super(),this._name="Ethiopian",this._jdEpoch=1723856,this._gregorianEpoch=1721426,this._daysPerMonth=[30,30,30,30,30,30,30,30,30,30,30,30,5],this._hasYearZero=!1,this._minMonth=1,this._firstMonth=1,this._quarterMonthOffset=-2,this._minDay=1,this._epochs=["BEE","EE"],this._monthNames=["Meskerem","Tikemet","Hidar","Tahesas","Tir","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehase","Pagume"],this._monthNamesShort=["Mes","Tik","Hid","Tah","Tir","Yek","Meg","Mia","Gen","Sen","Ham","Neh","Pag"],this._dayNames=["Ehud","Segno","Maksegno","Irob","Hamus","Arb","Kidame"],this._dayNamesShort=["Ehu","Seg","Mak","Iro","Ham","Arb","Kid"],this._dayNamesMin=["Eh","Se","Ma","Ir","Ha","Ar","Ki"],this._dateFormat="dd/mm/yyyy",this._firstDay=0,this._isRTL=!1}monthNames(){return this._monthNames}leapYear(e){const t=this._validate(e,this.minMonth,this.minDay,this._invalids.invalidYear),r=t.year()+(t.year()<0?1:0);return r%4==3||r%4==-1}monthsInYear(e){return this._validate(e,this.minMonth,this.minDay,this._invalids.invalidYear),13}weekOfYear(e,t,r){var n=this.newDate(e,t,r);return n.add(-n.dayOfWeek(),"d"),Math.floor((n.dayOfYear()-1)/7)+1}daysInMonth(e,t){const r=this._validate(e,t,this._minDay,this._invalids.invalidMonth);return this._daysPerMonth[r.month()-1]+(13===r.month()&&this.leapYear(r.year())?1:0)}weekDay(e,t,r){return(this.dayOfWeek(e,t,r)||7)<6}quarterMonthOffset(){return this._quarterMonthOffset}fromJSDate(e){const t=this.newDate(e.getFullYear(),e.getMonth()+1,e.getDate());return this.fromJD(this.toJD(t.year(),t.month(),t.day()))}toJD(e,t,r){const n=Math.floor(e/4)-Math.floor((e-1)/4)-Math.floor(e/100)+Math.floor((e-1)/100)+Math.floor(e/400)-Math.floor((e-1)/400),i=Math.floor((14-t)/12),a=31*i*(t-1)+(1-i)*(59+n+30*(t-3)+Math.floor((3*t-7)/5))+r-1;return this._gregorianEpoch+365*(e-1)+Math.floor((e-1)/4)-Math.floor((e-1)/100)+Math.floor((e-1)/400)+a}fromJD(e){const t=(e-this._jdEpoch)%1461,r=t%365+365*Math.floor(t/1460),n=4*Math.floor((e-this._jdEpoch)/1461)+Math.floor(t/365)-Math.floor(t/1460),i=Math.floor(r/30)+1,a=r%30+1;return this.newDate(n,i,a)}}class _ extends p{constructor(){super(),this._name="Gregorian",this._jdEpoch=1721425.5,this._daysPerMonth=[31,28,31,30,31,30,31,31,30,31,30,31],this._hasYearZero=!1,this._minMonth=1,this._firstMonth=1,this._minDay=1,this._epochs=["BCE","CE"],this._monthNames=["January","February","March","April","May","June","July","August","September","October","November","December"],this._dayNames=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],this._monthNamesShort=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],this._dayNamesShort=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],this._dayNamesMin=["Su","Mo","Tu","We","Th","Fr","Sa"],this._dateFormat="mm/dd/yyyy",this._firstDay=0,this._isRTL=!1}monthNames(){return this._monthNames}leapYear(e){const t=this._validate(e,this._minMonth,this._minDay,this._invalids.invalidYear);return(e=t.year()+(t.year()<0?1:0))%4==0&&(e%100!=0||e%400==0)}weekOfYear(e,t,r){const n=this.newDate(e,t,r);return n.add(4-(n.dayOfWeek()||7),"d"),console.log(Math.floor((n.dayOfYear()-1)/7)+1),Math.floor((n.dayOfYear()-1)/7)+1}daysInMonth(e,t){const r=this._validate(e,t,this._minDay,this._invalids.invalidMonth);return this._daysPerMonth[r.month()-1]+(2===r.month()&&this.leapYear(r.year())?1:0)}weekDay(e,t,r){return(this.dayOfWeek(e,t,r)||7)<6}quarterMonthOffset(){return 0}toJD(e,t,r){const n=this._validate(e,t,r,this._invalids.invalidDate);e=n.year(),t=n.month(),r=n.day(),e<0&&e++,t<3&&(t+=12,e--);const i=Math.floor(e/100),a=2-i+Math.floor(i/4);return Math.floor(365.25*(e+4716))+Math.floor(30.6001*(t+1))+r+a-1524.5}fromJD(e){const t=Math.floor(e+.5);let r=Math.floor((t-1867216.25)/36524.25);const n=(r=t+1+r-Math.floor(r/4))+1524,i=Math.floor((n-122.1)/365.25),a=Math.floor(365.25*i),s=Math.floor((n-a)/30.6001),o=n-a-Math.floor(30.6001*s),h=s-(s>13.5?13:1),c=i-(h>2.5?4716:4715);return c<=0&&c--,this.newDate(c,h,o)}toJSDate(e,t,r){const n=this._validate(e,t,r,this._invalids.invalidDate),i=new Date(n.year(),n.month()-1,n.day());return i.setHours(0),i.setMinutes(0),i.setSeconds(0),i.setMilliseconds(0),i.setHours(i.getHours()>12?i.getHours()+2:0),i}fromJSDate(e){return this.newDate(e.getFullYear(),e.getMonth()+1,e.getDate())}}class g{constructor(e){this._calendarId=e,this._calendar={},this.getInstance()}getInstance(){switch(this._calendarId){case"ethiopian":return this._calendar=new y,this;default:if(this._calendar=new _,!this._calendar)throw new Error("Calendar could not be instantiated");return this}}getMonths(){const e=this._calendar.monthNames();return 13===e.length?e.slice(0,-1):e}getCurrentYear(){return this._calendar.today().year()}getCurrentMonth(){return this._calendar.today().month()}getCurrentDay(){return this._calendar.today().day()}getQuarterMonthOffset(){return this._calendar.quarterMonthOffset()}getCurrentQuarter(){const e=this.getCurrentMonth()-this.getQuarterMonthOffset();return Math.ceil((e>12?1:e)/3)}getCurrentBiMonth(){return Math.ceil(this.getCurrentMonth()/2)}getCurrentSixMonth(){return Math.ceil(this.getCurrentMonth()/6)}getCurrentSixMonthApril(){const e=this.getCurrentMonth();return e>=4&&e<=9?1:2}getCurrentSixMonthNovember(){const e=this.getCurrentMonth();return e>=5&&e<=10?2:1}}class v{constructor(e,t,r,n){if(this._calendarId=e||"gregorian",this._type=t,this._preferences=r,this._periods=[],this._calendar=new g(e),!this._calendar)throw new Error("Calendar could not be set");this._year=n||this._calendar.getCurrentYear(),this._month=this._calendar.getCurrentMonth(),this._quarter=this._calendar.getCurrentQuarter(),this._biMonth=this._calendar.getCurrentBiMonth(),this._sixMonth=this._calendar.getCurrentSixMonth(),this._sixMonthApril=this._calendar.getCurrentSixMonthApril(),this._sixMonthNovember=this._calendar.getCurrentSixMonthNovember(),this._monthNames=this._calendar.getMonths(),this._quarterMonthOffset=this._calendar.getQuarterMonthOffset()}get(){return this._periods=this.getPeriods(this._type,this._year),this._preferences&&this._preferences.allowFuturePeriods||-1!==this._type.indexOf("Relative")?this._periods.reverse():this.omitFuturePeriods(this.includeLastPeriods(this._periods,this._type,this._year),this._type).reverse()}year(){return this._year}currentYear(){return this._calendar.getCurrentYear()}getPeriods(e,t,r=0){let n;switch(e){case"Monthly":n=this.getMonthlyPeriods(t,r);break;case"Quarterly":n=this.getQuarterlyPeriods(t);break;case"BiMonthly":n=this.getBiMonthlyPeriods(t);break;case"SixMonthly":n=this.getSixMonthlyPeriods(t);break;case"SixMonthlyApril":n=this.getSixMonthlyAprilPeriods(t);break;case"SixMonthlyNovember":n=this.getSixMonthlyNovemberPeriods(t);break;case"Yearly":n=this.getYearlyPeriods(t,"Yearly");break;case"FinancialApril":n=this.getYearlyPeriods(t,"FinancialApril","April",3);break;case"FinancialJuly":n=this.getYearlyPeriods(t,"FinancialJuly","July",6);break;case"FinancialOctober":n=this.getYearlyPeriods(t,"FinancialOctober","Oct",9);break;case"FinancialNovember":n=this.getYearlyPeriods(t,"FinancialNovember","Nov",10);break;case"RelativeMonth":case"RelativeBiMonth":case"RelativeQuarter":case"RelativeSixMonth":case"RelativeYear":case"RelativeFinancialYear":case"RelativeWeek":n=this.getRelativePeriods(e);break;default:n=[]}return n}includeLastPeriods(e,t,r){const n=this.getPeriods(t,r-1),i=e;return(e||[]).map((e,t)=>{const r=i[t-1]||Object(f.last)(n),a={id:r.id,name:r.name};return e.lastPeriod=a,e})}getRelativePeriods(e){switch(e){case"RelativeBiMonth":return[{id:"THIS_BIMONTH",type:e,name:"This Bi-month"},{id:"LAST_BIMONTH",type:e,name:"Last Bi-month"},{id:"LAST_6_BIMONTHS",type:e,name:"Last 6 bi-month"}];case"RelativeMonth":return[{id:"THIS_MONTH",type:e,name:"This Month"},{id:"LAST_MONTH",type:e,name:"Last Month"},{id:"LAST_3_MONTHS",type:e,name:"Last 3 Months"},{id:"LAST_6_MONTHS",type:e,name:"Last 6 Months"},{id:"LAST_12_MONTHS",type:e,name:"Last 12 Months"}];case"RelativeQuarter":return[{id:"THIS_QUARTER",type:e,name:"This Quarter"},{id:"LAST_QUARTER",type:e,name:"Last Quarter"},{id:"LAST_4_QUARTERS",type:e,name:"Last 4 Quarters"}];case"RelativeSixMonth":return[{id:"THIS_SIX_MONTH",type:e,name:"This Six-month"},{id:"LAST_SIX_MONTH",type:e,name:"Last Six-month"},{id:"LAST_2_SIXMONTHS",type:e,name:"Last 2 Six-month"}];case"RelativeYear":return[{id:"THIS_YEAR",type:e,name:"This Year"},{id:"LAST_YEAR",type:e,name:"Last Year"},{id:"LAST_5_YEARS",type:e,name:"Last 5 Years"}];case"RelativeFinancialYear":return[{id:"THIS_FINANCIAL_YEAR",type:e,name:"This Financial Year"},{id:"LAST_FINANCIAL_YEAR",type:e,name:"Last Financial Year"},{id:"LAST_5_FINANCIAL_YEARS",type:e,name:"Last 5 Financial Years"}];case"RelativeWeek":return[{id:"THIS_WEEK",type:e,name:"This Week"},{id:"LAST_WEEK",type:e,name:"Last Week"},{id:"LAST_4_WEEKS",type:e,name:"Last 4 Weeks"},{id:"LAST_12_WEEKS",type:e,name:"last 12 Weeks"},{id:"LAST_52_WEEKS",type:e,name:"Last 52 weeks"}];default:return[]}}getMonthlyPeriods(e,t=0){const r=(this._monthNames||[]).map((r,n)=>{const i=n+1-t>12?e-1:e,a=this.getMonthPeriodId(i,n+1);return{id:a,type:"Monthly",name:`${r} ${i}`,daily:this.getChildrenPeriods(a,"Monthly","Daily",this._preferences),weekly:this.getChildrenPeriods(a,"Monthly","Weekly",this._preferences)}});return this.getMonthsByOffset(r,t)}getQuarterlyPeriods(e){return Object(f.chunk)(this.getMonthsByOffset(this.getMonthWithYears(this._monthNames,e,this._quarterMonthOffset),this._quarterMonthOffset),3).map((t,r)=>{const n=this.getQuarterPeriodId(e,r+1),i=Object(f.head)(t||[]),a=Object(f.last)(t||[]);return{id:n,type:"Quarterly",name:this.getPeriodNameByRange(i,a,e),daily:this.getChildrenPeriods(n,"Quarterly","Daily",this._preferences),weekly:this.getChildrenPeriods(n,"Quarterly","Weekly",this._preferences),monthly:this.getChildrenPeriods(n,"Quarterly","Monthly",this._preferences)}})}getPeriodNameByRange(e,t,r){return`${[e.name+` ${e.year}`,t.name].join(" - ")} ${t.year}`}getMonthsByOffset(e,t){return 0===t?e:[...e.slice(t),...e.slice(0,e.length+t)]}getMonthWithYears(e,t,r){return(e||[]).map((e,n)=>{return{name:e,index:n,year:n+1-r>12?t-1:t}})}getBiMonthlyPeriods(e){return(Object(f.chunk)(this._monthNames||[],2)||[]).map((t,r)=>{const n=this.getBiMonthlyPeriodId(e,r+1);return{id:n,type:"BiMonthly",name:`${[Object(f.head)(t||[]),Object(f.last)(t||[])].join(" - ")} ${e}`,daily:this.getChildrenPeriods(n,"BiMonthly","Daily",this._preferences),weekly:this.getChildrenPeriods(n,"BiMonthly","Weekly",this._preferences),monthly:this.getChildrenPeriods(n,"BiMonthly","Monthly",this._preferences)}})}getSixMonthlyPeriods(e){return(Object(f.chunk)(this._monthNames||[],6)||[]).map((t,r)=>{const n=this.getSixMonthlyPeriodId(e,r+1);return{id:n,type:"SixMonthly",name:`${[Object(f.head)(t||[]),Object(f.last)(t||[])].join(" - ")} ${e}`,daily:this.getChildrenPeriods(n,"SixMonthly","Daily",this._preferences),weekly:this.getChildrenPeriods(n,"SixMonthly","Weekly",this._preferences),monthly:this.getChildrenPeriods(n,"SixMonthly","Monthly",this._preferences)}})}getSixMonthlyAprilPeriods(e){const t=this.getMonthWithYears(this._monthNames,e+1,-9);return(Object(f.chunk)([...t.slice(3),...t.slice(0,3)]||!1,6)||[]).map((t,r)=>{const n=this.getSixMonthlyPeriodId(e,r+1,"April");return{id:n,type:"SixMonthlyApril",name:this.getPeriodNameByRange(Object(f.head)(t||[]),Object(f.last)(t||[]),e),daily:this.getChildrenPeriods(n,"SixMonthlyApril","Daily",this._preferences),weekly:this.getChildrenPeriods(n,"SixMonthlyApril","Weekly",this._preferences),monthly:this.getChildrenPeriods(n,"SixMonthlyApril","Monthly",this._preferences)}})}getSixMonthlyNovemberPeriods(e){return Object(f.chunk)(this.getMonthsByOffset(this.getMonthWithYears(this._monthNames,e,-2),this._quarterMonthOffset),6).map((t,r)=>{const n=this.getSixMonthlyPeriodId(e,r+1,"Nov");return{id:n,type:"SixMonthlyNovember",name:this.getPeriodNameByRange(Object(f.head)(t||[]),Object(f.last)(t||[]),e),daily:this.getChildrenPeriods(n,"SixMonthlyNovember","Daily",this._preferences),weekly:this.getChildrenPeriods(n,"SixMonthlyNovember","Weekly",this._preferences),monthly:this.getChildrenPeriods(n,"SixMonthlyNovember","Monthly",this._preferences)}})}getYearlyPeriods(e,t,r="",n=-1){return Object(f.range)(10).map(i=>{const a=parseInt(e,10)-i,s=this.getYearlyPeriodId(a,r),o=this.getYearlyPeriodName(a,n);return{id:s,type:t,name:o,daily:this.getChildrenPeriods(s,t,"Daily",this._preferences),weekly:this.getChildrenPeriods(s,t,"Weekly",this._preferences),monthly:this.getChildrenPeriods(s,t,"Monthly",this._preferences),quarterly:this.getChildrenPeriods(s,t,"Quarterly",this._preferences)}}).reverse()}omitFuturePeriods(e,t){return e.filter(e=>e.id<this.getCurrentPeriodId(t))}getCurrentPeriodId(e){switch(e){case"Monthly":return this.getMonthPeriodId(this._calendar.getCurrentYear(),this._month);case"Quarterly":return this.getQuarterPeriodId(this._calendar.getCurrentYear(),this._quarter);case"BiMonthly":return this.getBiMonthlyPeriodId(this._calendar.getCurrentYear(),this._biMonth);case"SixMonthly":return this.getSixMonthlyPeriodId(this._calendar.getCurrentYear(),this._sixMonth);case"SixMonthlyApril":return this.getSixMonthlyPeriodId(this._calendar.getCurrentYear(),this._sixmonthApril,"April");case"SixMonthlyNovember":return this.getSixMonthlyPeriodId(this._calendar.getCurrentYear(),this._sixMonthNovember,"Nov");case"Yearly":return this._calendar.getCurrentYear();case"FinancialApril":{const e=this._calendar.getCurrentYear();return this.getYearlyPeriodId(this._month>=4?e:e-1,"FinancialApril")}case"FinancialJuly":{const e=this._calendar.getCurrentYear();return this.getYearlyPeriodId(this._month>=7?e:e-1,"FinancialJuly")}case"FinancialOctober":{const e=this._calendar.getCurrentYear();return this.getYearlyPeriodId(this._month>=10?e:e-1,"FinancialOctober")}case"FinancialNovember":{const e=this._calendar.getCurrentYear();return this.getYearlyPeriodId(this._month>=11?e:e-1,"FinancialNovember")}default:return}}getMonthPeriodId(e,t){return e+(t<10?`0${t}`:t).toString()}getQuarterPeriodId(e,t){return`${e}Q${t}`}getBiMonthlyPeriodId(e,t){return`${e}0${t}B`}getSixMonthlyPeriodId(e,t,r=""){return`${e}${r}S${t}`}getYearlyPeriodId(e,t=""){return`${e}${t}`}getYearlyPeriodName(e,t=-1){return-1===t?e.toString():`${this._monthNames[t]} ${e} - ${this._monthNames[t-1]} ${e+1}`}getYearlyMonthIndex(e){}getChildrenPeriods(e,t,r,n){let i=[];switch(t){case"Yearly":{const t=parseInt(e.slice(0,4),10);isNaN(t)||(i=this.getPeriods(r,t).reverse());break}case"Quarterly":{const t=parseInt(e.slice(0,4),10);if(!isNaN(t))switch(r){case"Monthly":{const n=parseInt(e.slice(-1),10);i=(this.getPeriods(r,t,this._quarterMonthOffset)||[]).filter(({},e)=>{const t=3*n;return e>=t-3&&e<t}).reverse();break}}break}case"BiMonthly":{const t=parseInt(e.slice(0,4),10);if(!isNaN(t))switch(r){case"Monthly":{const n=parseInt(e.slice(4),10);i=(this.getPeriods(r,t,0)||[]).filter(({},e)=>{const t=2*n;return e>=t-2&&e<t}).reverse();break}}break}case"SixMonthly":{const t=parseInt(e.slice(0,4),10);if(!isNaN(t))switch(r){case"Monthly":{const n=parseInt(e.slice(-1),10);i=(this.getPeriods(r,t,0)||[]).filter(({},e)=>{const t=6*n;return e>=t-6&&e<t}).reverse();break}}break}}return n&&"ASC"===n.childrenPeriodSortOrder?i.reverse():i}}class M{constructor(){this._periodTypes=[{id:"Monthly",name:"Monthly",rank:3},{id:"BiMonthly",name:"BiMonthly",rank:4},{id:"Quarterly",name:"Quarterly",rank:5},{id:"SixMonthly",name:"SixMonthly",rank:6},{id:"SixMonthlyApril",name:"SixMonthlyApril",rank:6},{id:"SixMonthlyNovember",name:"SixMonthlyNovember",rank:6},{id:"Yearly",name:"Yearly",rank:7},{id:"FinancialApril",name:"FinancialApril",rank:7},{id:"FinancialJuly",name:"FinancialJuly",rank:7},{id:"FinancialOctober",name:"FinancialOctober",rank:7},{id:"FinancialNovember",name:"FinancialNovember",rank:7},{id:"RelativeWeek",name:"RelativeWeek",rank:2},{id:"RelativeMonth",name:"RelativeMonth",rank:3},{id:"RelativeBiMonth",name:"RelativeBiMonth",rank:3},{id:"RelativeSixMonth",name:"RelativeSixMonth",rank:6},{id:"RelativeQuarter",name:"RelativeQuarter",rank:5},{id:"RelativeYear",name:"RelativeYear",rank:7},{id:"RelativeFinancialYear",name:"RelativeFinancialYear",rank:7}],this._validTypes=this._periodTypes.map(e=>e.id)}isValid(e){return this._validTypes.includes(e)}get(){return this._periodTypes}}r.d(t,"Fn",function(){return w});let w={Analytics:u,EventAnalytics:class extends u{setProgram(e){return this.program=e,this}get url(){return"analytics/events/query/"+this.program+"?"+this._urlParameters}},AnalyticsResult:l,IdentifiableObject:class extends o{constructor(e){super(),this._filters=[],this.objectName=e}get name(){return this.objectName}where(e,t,r){return this._filters.push({right:e,operator:t,left:r}),this}get url(){var e=this._urlParameters;return this._filters.forEach(t=>{""!==e&&(e+="&"),e+="filter="+t.right,"=="===t.operator?e+=":eq:"+t.left:"<"===t.operator?e+=":lt:"+t.left:"<="===t.operator?e+=":le:"+t.left:">"===t.operator?e+=":gt:"+t.left:">="===t.operator?e+=":ge:"+t.left:"<>"===t.operator?e+=":!eq:"+t.left:"in"===t.operator||"!in"===t.operator?e+=":"+t.operator+":["+t.left+"]":t.left?e+=":"+t.operator+":"+t.left:e+=":"+t.operator}),this.name+".json?"+e}},SQLViewData:class extends o{constructor(e){super(),this._id=e,this.parameters.var={}}setVariable(e,t){return this.parameters.var[e]=t||"",this}get url(){return"sqlViews/"+this._id+"/data.json?"+this._urlParameters}},Runner:n.a,Dependency:class{constructor(e,t){this.process=e,this.processCallback=t}},Period:class{constructor(){if(this._calendarId="gregorian",this._periodType=new M,!this._periodType)throw new Error("Could not instantiate period type")}setType(e){if(!this._periodType.isValid(e))throw new Error("Not a valid period type");return this._type=e,this}setYear(e){return this._year=e,this}setCalendar(e){return this._calendarId=e,this}setPreferences(e){return this._preferences=e,this}setPeriod(e){}get(){if(this._type){const e=new v(this._calendarId,this._type,this._preferences,this._year);this._periods=e.get(),this._year=e.year(),this._currentYear=e.currentYear()}return this}type(){return this._type}list(){return this._periods}year(){return this._year}currentYear(){return this._currentYear}},PeriodType:M,MultiFetcher:d,all:e=>new d(e),init:e=>{n.a.initiateRunner(e)}};"undefined"!=typeof window&&(window.Fn=w)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,