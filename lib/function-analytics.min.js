(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("lodash"));
	else if(typeof define === 'function' && define.amd)
		define("function-analytics", ["lodash"], factory);
	else if(typeof exports === 'object')
		exports["function-analytics"] = factory(require("lodash"));
	else
		root["function-analytics"] = factory(root["_"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_lodash__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);
  config.method = config.method ? config.method.toLowerCase() : 'get';

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");
var isAbsoluteURL = __webpack_require__(/*! ./../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ./../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  utils.forEach(['url', 'method', 'params', 'data'], function valueFromConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    }
  });

  utils.forEach(['headers', 'auth', 'proxy'], function mergeDeepProperties(prop) {
    if (utils.isObject(config2[prop])) {
      config[prop] = utils.deepMerge(config1[prop], config2[prop]);
    } else if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (utils.isObject(config1[prop])) {
      config[prop] = utils.deepMerge(config1[prop]);
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  utils.forEach([
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength',
    'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken',
    'socketPath'
  ], function defaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  // Only Node.JS has a process variable that is of [[Class]] process
  if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var isBuffer = __webpack_require__(/*! is-buffer */ "./node_modules/is-buffer/index.js");

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function deepMerge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = deepMerge(result[key], val);
    } else if (typeof val === 'object') {
      result[key] = deepMerge({}, val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  deepMerge: deepMerge,
  extend: extend,
  trim: trim
};


/***/ }),

/***/ "./node_modules/is-buffer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/progress-promise/index.js":
/*!************************************************!*\
  !*** ./node_modules/progress-promise/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Fallback for engines that don't support Symbol
const LISTENERS = Symbol ? Symbol() : '__listeners';

class ProgressPromise extends Promise {
  constructor(executor) {
    super((resolve, reject) =>
      executor(
        resolve,
        reject,
        // Pass method for passing progress to listener
        value => {
          try {
            return this[LISTENERS].forEach(listener => listener(value));
          } catch (error) {
            reject(error);
          }
        }
      )
    );
    this[LISTENERS] = [];
  }
  progress(handler) {
    if (typeof handler !== 'function')
      throw new Error('PROGRESS_REQUIRES_FUNCTION');
    this[LISTENERS].push(handler);
    return this;
  }
  static all(promises) {
    const results = new Array(promises.length);
    const length = promises.length;
    let resolveCount = 0;
    return new ProgressPromise((resolve, reject, progress) => {
      promises.forEach((promise, index) => {
        promise
          .then(result => {
            results[index] = result;
            results.proportion = ++resolveCount / length;
            progress(results);
            if (resolveCount === length) resolve(results);
          })
          .catch(reject);
      });
    });
  }
  static sequence(inputs, handler) {
    const results = [];
    const length = inputs.length;
    let resolveCount = 0;
    return new ProgressPromise((resolve, reject, progress) => {
      function invokeNext() {
        handler
          .call(null, inputs[results.length])
          .then(result => {
            results.push(result);
            results.proportion = ++resolveCount / length;
            progress(results);
            if (results.length === length) resolve(results);
            else invokeNext();
          })
          .catch(reject);
      }
      invokeNext();
    });
  }
}

module.exports = ProgressPromise;


/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: Fn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fn", function() { return Fn; });
/* harmony import */ var _model_analytics_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model/analytics.js */ "./src/model/analytics.js");
/* harmony import */ var _result_analytics_result__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./result/analytics-result */ "./src/result/analytics-result.js");
/* harmony import */ var _model_event_analytics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model/event-analytics */ "./src/model/event-analytics.js");
/* harmony import */ var _model_sql_view_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/sql-view.js */ "./src/model/sql-view.js");
/* harmony import */ var _utilities_runner_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utilities/runner.js */ "./src/utilities/runner.js");
/* harmony import */ var _utilities_dependency__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utilities/dependency */ "./src/utilities/dependency.js");
/* harmony import */ var _utilities_multi_fetcher__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utilities/multi-fetcher */ "./src/utilities/multi-fetcher.js");
/* harmony import */ var _model_identifiable_object_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./model/identifiable-object.js */ "./src/model/identifiable-object.js");
/* harmony import */ var _model_period__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./model/period */ "./src/model/period.js");
/* harmony import */ var _model_period_type__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./model/period-type */ "./src/model/period-type.js");










/**
 * This is the main holder for the functionalities of the function
 * @namespace
 * @type {{Promise: ProgressPromise, Analytics: Analytics,
 *   AnalyticsResult: AnalyticsResult,
 *   OrganisationUnit: OrganisationUnit, SQLViewData: SQLViewData,
 *   Runner: Runner, Dependency: Dependency, MultiFetcher: MultiFetcher,
 *   all: (function(Fetcher[])), init: (function(*=))}
 * }
 */

let Fn = {
  Analytics: _model_analytics_js__WEBPACK_IMPORTED_MODULE_0__["Analytics"],
  EventAnalytics: _model_event_analytics__WEBPACK_IMPORTED_MODULE_2__["EventAnalytics"],
  AnalyticsResult: _result_analytics_result__WEBPACK_IMPORTED_MODULE_1__["AnalyticsResult"],
  IdentifiableObject: _model_identifiable_object_js__WEBPACK_IMPORTED_MODULE_7__["IdentifiableObject"],
  SQLViewData: _model_sql_view_js__WEBPACK_IMPORTED_MODULE_3__["SQLViewData"],
  Runner: _utilities_runner_js__WEBPACK_IMPORTED_MODULE_4__["Runner"],
  Dependency: _utilities_dependency__WEBPACK_IMPORTED_MODULE_5__["Dependency"],
  Period: _model_period__WEBPACK_IMPORTED_MODULE_8__["Period"],
  PeriodType: _model_period_type__WEBPACK_IMPORTED_MODULE_9__["PeriodType"],
  MultiFetcher: _utilities_multi_fetcher__WEBPACK_IMPORTED_MODULE_6__["MultiFetcher"],

  /**
   * Adds multiple fetchers in queue for execution.
   *
   * @param {Fetcher[]} fetchers - The fethers is an array of the fetchers
   * @returns {ProgressPromise} - Progress Promise for fetching the various fetchers
   * @example
   * Fn.all([new Fn.Analytics(), new Fn.OrganisationUnit()]);
   */
  all: fetchers => {
    return new _utilities_multi_fetcher__WEBPACK_IMPORTED_MODULE_6__["MultiFetcher"](fetchers);
  },

  /**
   * Configures the running environment parameters
   *
   * @param {Object} configuration - The fethers is an array of the fetchers
   * @returns {ProgressPromise} - Progress Promise for fetching the various fetchers
   * @example
   * Fn.all({baseUrl:''});
   */
  init: config => {
    _utilities_runner_js__WEBPACK_IMPORTED_MODULE_4__["Runner"].initiateRunner(config);
  }
};

if (typeof window !== 'undefined') {
  window.Fn = Fn;
}



/***/ }),

/***/ "./src/model/analytics.js":
/*!********************************!*\
  !*** ./src/model/analytics.js ***!
  \********************************/
/*! exports provided: Analytics */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Analytics", function() { return Analytics; });
/* harmony import */ var _utilities_fetcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/fetcher */ "./src/utilities/fetcher.js");
/* harmony import */ var _result_analytics_result__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../result/analytics-result */ "./src/result/analytics-result.js");


/**
 * @description
 * This represents the Analytics Fetcher for processing for making Web API calls
 * @example
 * const analytics = Fn.Analytics();
 * @extends Fetcher
 */

class Analytics extends _utilities_fetcher__WEBPACK_IMPORTED_MODULE_0__["Fetcher"] {
  /**
   * @description
   * Creates an analytics fethcer
   *
   * @param {Number} version - The version of dhis analytics structure to use
   */
  constructor(version = 25) {
    super();

    if (typeof version === 'boolean') {
      if (version) {
        version = 25;
      } else {
        version = 26;
      }
    }

    this.parameters['dimension'] = {};
    this.postProcess(data => {
      return this.standardizeAnalytics(data, version);
    });
  }
  /**
   * Sets the data for the fetch
   * @param {string} dx The id of the data to get
   * @returns {Analytics} - Object with the analytics interaction properties
   */


  setData(dx) {
    this.setDimension('dx', dx);
    return this;
  }
  /**
   * Sets the period for the fetch
   * @param {string} pe The id of the period to get data from
   * @returns {Analytics} Object with the analytics interaction properties
   */


  setPeriod(pe) {
    this.setDimension('pe', pe);
    return this;
  }
  /**
   * Sets the organisation unit for the fetching of the analytics
   * @param {string} ou - Organisation unit
   * @returns {Analytics} Object with the analytics interaction properties
   */


  setOrgUnit(ou) {
    this.setDimension('ou', ou);
    return this;
  }
  /**
   * Sets the data,period and organisation unit from function input parameters object for the fetching of the analytics
   * @param {string} parameters - Rule parameters
   * @returns {Analytics} Object with the analytics interaction properties
   */


  setSelections(parameters) {
    this.setPeriod(parameters.pe);
    this.setOrgUnit(parameters.ou); // Set data Selection

    if (parameters.rule.json.data !== undefined) {
      // @TODO add support for only fetching 11char long uids, and joining them
      // into a comma separated string, so in future, parameters.rule.json.data
      // could simply be an indicator expresssion with unary operators and javascript
      // functions inside to be executed the express parameters.rule.json.data
      this.setData(parameters.rule.json.data);
    } // Set dynamic dimension


    if (parameters.dimensions !== undefined && Array.isArray(parameters.dimensions)) {
      parameters.dimensions.forEach(function (dimension) {
        if (Array.isArray(dimension.items)) {
          let dimensionItems = '';
          dimension.items.forEach(function (item) {
            dimensionItems.length > 0 ? dimensionItems += ';' + item : dimensionItems += item;
          });
          this.setDimension(dimension.id, dimensionItems);
        }
      });
    }

    return this;
  }
  /**
   * Sets the dimension for the fetching of the analytics
   * @param {string} dim - Dynamic Dimension identifier
   * @param {string} value - Dynamic dimension options identifiers
   * @returns {Analytics} Object with the analytics interaction properties
   */


  setDimension(dim, value) {
    this.parameters['dimension'][dim] = value ? value : '';
    return this;
  }
  /**
   * Standardizes the analytics object
   *
   * @param {Object} analyticsObject - The analytics object
   * @param {Number} version - The version of dhis analytics structure to use
   * @returns {AnalyticsResult} - Object with the analytics results
   */


  standardizeAnalytics(analyticsObject, version = 25) {
    if (typeof version === 'boolean') {
      if (version) {
        version = 25;
      } else {
        version = 26;
      }
    } // if Serverside Event clustering do nothing


    if (analyticsObject.count) {
      return analyticsObject;
    }

    let sanitizedAnalyticsObject = {
      headers: [],
      metaData: {
        dimensions: {},
        names: {},
        dx: [],
        pe: [],
        ou: [],
        co: []
      },
      rows: []
    };

    if (analyticsObject) {
      /**
       * Check headers
       */
      if (analyticsObject.headers) {
        analyticsObject.headers.forEach(header => {
          try {
            let newHeader = header;
            sanitizedAnalyticsObject.headers.push(newHeader);
          } catch (e) {
            console.warn('Invalid header object');
          }
        });
      }
      /**
       * Check metaData
       */


      if (analyticsObject.metaData) {
        try {
          let sanitizedMetadata = this.getSanitizedAnalyticsMetadata(analyticsObject.metaData, version);
          sanitizedAnalyticsObject.metaData = sanitizedMetadata;
        } catch (e) {
          console.warn('Invalid metadata object');
        }
      }
      /**
       * Check rows
       */


      if (analyticsObject.rows) {
        sanitizedAnalyticsObject.rows = analyticsObject.rows;
      }
    }

    sanitizedAnalyticsObject.height = analyticsObject.height;
    sanitizedAnalyticsObject.width = analyticsObject.width;
    return new _result_analytics_result__WEBPACK_IMPORTED_MODULE_1__["AnalyticsResult"](sanitizedAnalyticsObject);
  }
  /**
   * Standardizes the analytics metadata object
   *
   * @param {Object} analyticMetadata - The analytics metadata object
   * @param {Number} version - The version of dhis analytics structure to use
   * @returns {Object} - Object with the analytics metadata
   */


  getSanitizedAnalyticsMetadata(analyticMetadata, version) {
    let sanitizedMetadata = {};

    if (analyticMetadata) {
      if (analyticMetadata.ouHierarchy) {
        sanitizedMetadata.ouHierarchy = analyticMetadata.ouHierarchy;
      }

      if (version < 26) {
        // Get old structure
        sanitizedMetadata.names = {};

        if (analyticMetadata.names) {
          sanitizedMetadata.names = analyticMetadata.names;
        } else if (analyticMetadata.items) {
          Object.keys(analyticMetadata.items).forEach(nameKey => {
            sanitizedMetadata.names[nameKey] = analyticMetadata.items[nameKey].name;
          });
        }

        if (analyticMetadata.dimensions) {
          Object.keys(analyticMetadata.dimensions).forEach(nameKey => {
            sanitizedMetadata[nameKey] = analyticMetadata.dimensions[nameKey];
          });
        }
      } else {
        // Get new structure
        sanitizedMetadata.items = {};

        if (analyticMetadata.items) {
          sanitizedMetadata.items = analyticMetadata.items;
        } else if (analyticMetadata.names) {
          Object.keys(analyticMetadata.items).forEach(nameKey => {
            analyticMetadata.items[nameKey] = {
              name: analyticMetadata.names[nameKey]
            };
          });
        }

        if (!analyticMetadata.dimensions) {
          sanitizedMetadata.dimensions = {};
          Object.keys(analyticMetadata).forEach(nameKey => {
            if (['names', 'items', 'dimensions'].indexOf(nameKey) === -1) {
              sanitizedMetadata.dimensions[nameKey] = analyticMetadata[nameKey];
            }
          });
        } else {
          sanitizedMetadata.dimensions = analyticMetadata.dimensions;
        }
      }
    }

    return sanitizedMetadata;
  }
  /**
   * Gets the url for fetching
   * @returns {string}
   */


  get url() {
    return 'analytics?' + this._urlParameters;
  }

}

/***/ }),

/***/ "./src/model/event-analytics.js":
/*!**************************************!*\
  !*** ./src/model/event-analytics.js ***!
  \**************************************/
/*! exports provided: EventAnalytics */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventAnalytics", function() { return EventAnalytics; });
/* harmony import */ var _analytics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./analytics */ "./src/model/analytics.js");

/**
 * This represents the Event Analytics Fetcher for processing analytics calls
 *
 * @extends Analytics
 */

class EventAnalytics extends _analytics__WEBPACK_IMPORTED_MODULE_0__["Analytics"] {
  /**
   * Sets the Program for the fetch
   * @param {string} program - The id of the program
   * @returns {EventAnalytics} - Object with the event analytics
   */
  setProgram(program) {
    this.program = program;
    return this;
  }
  /**
   * Gets the url for fetching
   * @returns {string}
   */


  get url() {
    return 'analytics/events/query/' + this.program + '?' + this._urlParameters;
  }

}

/***/ }),

/***/ "./src/model/identifiable-object.js":
/*!******************************************!*\
  !*** ./src/model/identifiable-object.js ***!
  \******************************************/
/*! exports provided: IdentifiableObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IdentifiableObject", function() { return IdentifiableObject; });
/* harmony import */ var _utilities_fetcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/fetcher */ "./src/utilities/fetcher.js");

/**
 * Represents Identifiable Object
 *@extends Fetcher
 */

class IdentifiableObject extends _utilities_fetcher__WEBPACK_IMPORTED_MODULE_0__["Fetcher"] {
  /**
   * Creates a identifiable object fetcher
   *
   * @constructor
   *
   * @param {string} objectName - The name of the identifiable object as used in the web api
   *
   * @example
   * const identifiableObject = new Fn.IdentifiableObject('organisationUnits'); // Organisation Unit fetcher
   */
  constructor(objectName) {
    super();
    this._filters = [];
    this.objectName = objectName;
  }
  /**
   * Gets the name of the identifiable object
   *
   * @return {string} - The name of the Identifibale Object
   */


  get name() {
    return this.objectName;
  }
  /**
   * Sets the where clause for filtering of data
   * @param {string} right - Right expression
   * @param {string} operator - Expression operator
   * @param {string|array} left - Right expression
   * @returns {IdentifiableObject} IdentifiableObject Identifiable object with where clause appended
   *
   * @example
   * const organisationUnit = new Fn.IdentifiableObject('organisationUnits');
   * organisationUnit.where('level','==',4); //Will set to fetch organisation units at level 4
   * organisationUnit.where('children','empty'); //Will set to fetch organisation units with no children
   */


  where(right, operator, left) {
    this._filters.push({
      right: right,
      operator: operator,
      left: left
    });

    return this;
  }
  /**
   * Gets the url for fetching
   * @returns {string}
   */


  get url() {
    var url = this._urlParameters;

    this._filters.forEach(filter => {
      if (url !== '') {
        url += '&';
      }

      url += 'filter=' + filter.right;

      if (filter.operator === '==') {
        url += ':eq:' + filter.left;
      } else if (filter.operator === '<') {
        url += ':lt:' + filter.left;
      } else if (filter.operator === '<=') {
        url += ':le:' + filter.left;
      } else if (filter.operator === '>') {
        url += ':gt:' + filter.left;
      } else if (filter.operator === '>=') {
        url += ':ge:' + filter.left;
      } else if (filter.operator === '<>') {
        url += ':!eq:' + filter.left;
      } else if (filter.operator === 'in' || filter.operator === '!in') {
        url += ':' + filter.operator + ':[' + filter.left + ']';
      } else if (!filter.left) {
        url += ':' + filter.operator;
      } else {
        url += ':' + filter.operator + ':' + filter.left;
      }
    });

    return this.name + '.json?' + url;
  }

}

/***/ }),

/***/ "./src/model/period-type.js":
/*!**********************************!*\
  !*** ./src/model/period-type.js ***!
  \**********************************/
/*! exports provided: PeriodType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PeriodType", function() { return PeriodType; });
class PeriodType {
  constructor() {
    this._periodTypes = [{
      id: 'Monthly',
      name: 'Monthly',
      rank: 3
    }, {
      id: 'BiMonthly',
      name: 'BiMonthly',
      rank: 4
    }, {
      id: 'Quarterly',
      name: 'Quarterly',
      rank: 5
    }, {
      id: 'SixMonthly',
      name: 'SixMonthly',
      rank: 6
    }, {
      id: 'SixMonthlyApril',
      name: 'SixMonthlyApril',
      rank: 6
    }, {
      id: 'SixMonthlyNovember',
      name: 'SixMonthlyNovember',
      rank: 6
    }, {
      id: 'Yearly',
      name: 'Yearly',
      rank: 7
    }, {
      id: 'FinancialApril',
      name: 'FinancialApril',
      rank: 7
    }, {
      id: 'FinancialJuly',
      name: 'FinancialJuly',
      rank: 7
    }, {
      id: 'FinancialOctober',
      name: 'FinancialOctober',
      rank: 7
    }, {
      id: 'FinancialNovember',
      name: 'FinancialNovember',
      rank: 7
    }, {
      id: 'RelativeWeek',
      name: 'RelativeWeek',
      rank: 2
    }, {
      id: 'RelativeMonth',
      name: 'RelativeMonth',
      rank: 3
    }, {
      id: 'RelativeBiMonth',
      name: 'RelativeBiMonth',
      rank: 3
    }, {
      id: 'RelativeSixMonth',
      name: 'RelativeSixMonth',
      rank: 6
    }, {
      id: 'RelativeQuarter',
      name: 'RelativeQuarter',
      rank: 5
    }, {
      id: 'RelativeYear',
      name: 'RelativeYear',
      rank: 7
    }, {
      id: 'RelativeFinancialYear',
      name: 'RelativeFinancialYear',
      rank: 7
    }];
    this._validTypes = this._periodTypes.map(periodType => periodType.id);
  }

  isValid(type) {
    return this._validTypes.includes(type);
  }

  get() {
    return this._periodTypes;
  }

}

/***/ }),

/***/ "./src/model/period.js":
/*!*****************************!*\
  !*** ./src/model/period.js ***!
  \*****************************/
/*! exports provided: Period */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Period", function() { return Period; });
/* harmony import */ var _utilities_period_instance__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/period-instance */ "./src/utilities/period-instance.js");
/* harmony import */ var _period_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./period-type */ "./src/model/period-type.js");


/**
 * @description
 * Period class offers capabilities to get periods for different period types
 */

class Period {
  constructor() {
    this._calendarId = 'gregorian';
    this._periodType = new _period_type__WEBPACK_IMPORTED_MODULE_1__["PeriodType"]();

    if (!this._periodType) {
      throw new Error('Could not instantiate period type');
    }
  }
  /**
   * Set period type
   * @param {string} type
   */


  setType(type) {
    if (!this._periodType.isValid(type)) {
      throw new Error('Not a valid period type');
    }

    this._type = type;
    return this;
  }

  setYear(year) {
    this._year = year;
    return this;
  }

  setCalendar(calendarId) {
    this._calendarId = calendarId;
    return this;
  }

  setPreferences(preferences) {
    this._preferences = preferences;
    return this;
  }

  setPeriod(id) {}

  get() {
    if (this._type) {
      const periodInstance = new _utilities_period_instance__WEBPACK_IMPORTED_MODULE_0__["PeriodInstance"](this._calendarId, this._type, this._preferences, this._year);
      this._periods = periodInstance.get();
      this._year = periodInstance.year();
      this._currentYear = periodInstance.currentYear();
    }

    return this;
  }

  type() {
    return this._type;
  }

  list() {
    return this._periods;
  }

  year() {
    return this._year;
  }

  currentYear() {
    return this._currentYear;
  }

}

/***/ }),

/***/ "./src/model/sql-view.js":
/*!*******************************!*\
  !*** ./src/model/sql-view.js ***!
  \*******************************/
/*! exports provided: SQLViewData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SQLViewData", function() { return SQLViewData; });
/* harmony import */ var _utilities_fetcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/fetcher */ "./src/utilities/fetcher.js");

/**
 * Represents a fetcher to load sql view data
 *
 * @extends Fetcher
 */

class SQLViewData extends _utilities_fetcher__WEBPACK_IMPORTED_MODULE_0__["Fetcher"] {
  /**
   * Creates the SQLViewData Instance
   * @param {string} id - The Sql View identifier
   */
  constructor(id) {
    super();
    this._id = id;
    this.parameters['var'] = {};
  }
  /**
   * Sets the variable for the fetching of the sql view data
   * @param {string} variable - Variable identifier
   * @param {string} value - Value of the variable identifier
   * @returns {SQLViewData} - Object of the sql view
   */


  setVariable(variable, value) {
    this.parameters['var'][variable] = value ? value : '';
    return this;
  }
  /**
   * Gets the url for fetching
   * @returns {string}
   */


  get url() {
    let url = 'sqlViews/' + this._id + '/data.json?' + this._urlParameters;
    return url;
  }

}

/***/ }),

/***/ "./src/result/analytics-result.js":
/*!****************************************!*\
  !*** ./src/result/analytics-result.js ***!
  \****************************************/
/*! exports provided: AnalyticsHeader, AnalyticsHeaders, AnalyticsResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnalyticsHeader", function() { return AnalyticsHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnalyticsHeaders", function() { return AnalyticsHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnalyticsResult", function() { return AnalyticsResult; });
/* harmony import */ var _row__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./row */ "./src/result/row.js");

/**
 * This represents the Analytics header
 *
 */

class AnalyticsHeader {}
/**
 * This represents the Analytics Headers
 *
 * @extends Array
 */

class AnalyticsHeaders extends Array {
  constructor(data) {
    super(...data);
    Object.setPrototypeOf(this, Object.create(AnalyticsHeaders.prototype));
  }
  /**
   * Gets the data analytics header
   *
   * @returns {AnalyticsHeader}
   */


  get dx() {
    return this.getHeader('dx');
  }
  /**
   * Gets the period analytics header
   *
   * @returns {AnalyticsHeader}
   */


  get pe() {
    return this.getHeader('pe');
  }
  /**
   * Gets the organisation unit analytics header
   *
   * @returns {AnalyticsHeader}
   */


  get ou() {
    return this.getHeader('ou');
  }
  /**
   * Gets the value analytics header
   *
   * @returns {AnalyticsHeader}
   */


  get value() {
    return this.getHeader('value');
  }
  /**
   * Gets the header of a parameter
   * @param id
   * @returns {AnalyticsHeader}
   */


  getHeader(id) {
    let returnHeader;
    this.forEach((header, index) => {
      if (header.name === id) {
        returnHeader = header;
        returnHeader.index = index;
      }
    });
    return returnHeader;
  }

}
/**
 * This represents the Analytics Results
 *
 */

class AnalyticsResult {
  /**
   * Creates ana Analytics Object
   *
   * @param {Object} - DHIS Analytics object
   */
  constructor(analyticsObject) {
    this._data = analyticsObject;
  }
  /**
   * Gets the Analytics Headers Array
   *
   * @returns {Array} - DHIS Analytics headers
   */

  /*
  get headers() {
    return this._data.headers;
  }
  */

  /**
   * Gets the Analytics Headers Array
   *
   * @returns {AnalyticsHeaders}
   */


  get headers() {
    return new AnalyticsHeaders(this._data.headers);
  }
  /**
   * Gets the Analytics Metadata Object
   *
   * @returns {*|metaData|{dimensions, names, dx, pe, ou, co}|{ouHierarchy, items, dimensions}}
   */


  get metaData() {
    return this._data.metaData;
  }
  /**
   * Gets the rows of the analytics object
   *
   * @returns {Array}
   */


  get rows() {
    let rows = [];

    this._data.rows.forEach(row => {
      rows.push(new _row__WEBPACK_IMPORTED_MODULE_0__["Row"](row, this.headers, this.metaData));
    });

    return rows;
  }
  /**
   * Gets the dimension details by name of the dimension
   * @param {string} id
   *
   * @returns {Object|{id,name,!path}}
   */


  getDimensionDetailsByName(name) {
    var results = [];

    if (this.metaData.dimensions) {
      this.metaData.dimensions[name].forEach(item => {
        results.push(this.getDimensionDetails(item));
      });
    }

    return results;
  }
  /**
   * Gets the ou of the analytics object
   *
   * @returns {Array}
   */


  get rows() {
    let rows = [];

    this._data.rows.forEach(row => {
      rows.push(new _row__WEBPACK_IMPORTED_MODULE_0__["Row"](row, this.headers, this.metaData));
    });

    return rows;
  }
  /**
   * Gets the dimension details of a given id
   * @param {string} id
   *
   * @returns {Object|{id,name,!path}}
   */


  getDimensionDetails(id) {
    var name = '';

    if (this.metaData.names) {
      name = this.metaData.names[id];
    } else if (this.metaData.items) {
      name = this.metaData.items[id] ? this.metaData.items[id].name : undefined;
    }

    return {
      id: id,
      name: name,
      path: this.metaData.ouHierarchy && this.metaData.ouHierarchy[id] !== undefined ? this.metaData.ouHierarchy[id] : undefined
    };
  }
  /**
   * Gets the Analytics height
   *
   * @returns {number} - The number of rows
   */


  get height() {
    return this._data.height;
  }
  /**
   * Gets the Analytics width
   *
   * @returns {number}
   */


  get width() {
    return this._data.width;
  }

}

/***/ }),

/***/ "./src/result/row.js":
/*!***************************!*\
  !*** ./src/result/row.js ***!
  \***************************/
/*! exports provided: Row */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Row", function() { return Row; });
/**
 * This represents the Analytics Results
 *
 */
class Row {
  /**
   * Creates ana Analytics Object
   *
   * @param {Array} row - The analytics row
   * @param {Array} headers - The analytics headers
   * @param {Object} metaData - The analytics metadata
   */
  constructor(row, headers, metaData) {
    this.row = row;
    this.headers = headers;
    this.metaData = metaData;
  }
  /**
   * Gets the dimension details of the analytics row
   * @param {string} id - The id of the dimension
   * @returns {Object|{id,name,path}} - The data object with name and id
   */


  dimension(id) {
    var i = -1,
        name = '';
    this.headers.forEach((header, index) => {
      if (header.name === id) {
        i = index;
      }
    });

    if (this.metaData.names) {
      name = this.metaData.names[this.row[i]];
    } else if (this.metaData.items) {
      name = this.metaData.items[this.row[i]] ? this.metaData.items[this.row[i]].name : undefined;
    }

    return {
      id: this.row[i],
      name: name,
      path: this.metaData.ouHierarchy && this.metaData.ouHierarchy[this.row[i]] !== undefined ? this.metaData.ouHierarchy[this.row[i]] : undefined
    };
  }
  /**
   * Gets the data details of the analytics row
   *
   * @returns {Object|{id,name}} - The data object with name and id
   */


  get dx() {
    return this.dimension('dx');
  }
  /**
   * Gets the period details of the analytics row
   *
   * @returns {Object|{id,name}} - The period object
   */


  get pe() {
    return this.dimension('pe');
  }
  /**
   * Gets the organisation unit details of the analytics row
   *
   * @returns {Object|{id,name,path}} - The organisation unit object
   */


  get ou() {
    return this.dimension('ou');
  }
  /**
   * Gets the value in a row
   *
   * @returns {string} - The value
   */


  get value() {
    return this.dimension('value').id;
  }

}

/***/ }),

/***/ "./src/utilities/calendars/base-calendar.js":
/*!**************************************************!*\
  !*** ./src/utilities/calendars/base-calendar.js ***!
  \**************************************************/
/*! exports provided: BaseCalender */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseCalender", function() { return BaseCalender; });
/* harmony import */ var _calendar_date__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar-date */ "./src/utilities/calendars/calendar-date.js");

class BaseCalender {
  constructor() {
    this._validateLevel = 0;
    this._name = '';
    this._hasYearZero = false;
    this._minMonth = 1;
    this._minDay = 1;
    this._epochs = ['BCE', 'CE'];
    this._firstMonth = 1;
    this._invalids = {
      invalidCalendar: 'Calendar {0} not found',
      invalidDate: 'Invalid {0} date',
      invalidMonth: 'Invalid {0} month',
      invalidYear: 'Invalid {0} year',
      differentCalendars: 'Cannot mix {0} and {1} dates'
    };
  }

  _validate(yearOrDate, month, day, invalidText) {
    if (yearOrDate.year) {
      return yearOrDate;
    }

    try {
      this._validateLevel++;

      if (this._validateLevel === 1 && !this.isValid(yearOrDate, month, day)) {
        throw invalidText.replace(/\{0\}/, this._name);
      }

      const date = this.newDate(yearOrDate, month, day);
      this._validateLevel--;
      return date;
    } catch (e) {
      this._validateLevel--;
      throw e;
    }
  }

  isValid(yearOrDate, month, day) {
    this._validateLevel++;
    let valid = this._hasYearZero || yearOrDate !== 0;

    if (valid) {
      const e = this.newDate(yearOrDate, month, this._minDay);
      valid = month >= this._minMonth && month - this._minMonth < this.monthsInYear(e) && day >= this._minDay && day - this._minDay <= this.daysInMonth(e);
    }

    this._validateLevel--;
    return valid;
  }

  newDate(yearOrDate, month, day) {
    if (!yearOrDate) {
      return this.today();
    }

    if (yearOrDate.year) {
      this._validate(yearOrDate, month, day, this._invalids.invalidDate);

      day = yearOrDate.day();
      month = yearOrDate.month();
      yearOrDate = yearOrDate.year();
    }

    return new _calendar_date__WEBPACK_IMPORTED_MODULE_0__["CalendarDate"](this, yearOrDate, month, day);
  }

  today() {
    return this.fromJSDate(new Date());
  }

  fromJSDate(date) {
    return this.fromJD(this.fromJSDate(date).toJD());
  }

  toJSDate(yearOrDate, month, day) {
    const valid = this._validate(yearOrDate, month, day, this._invalids.invalidDate);

    return this.fromJD(this.toJD(valid)).toJSDate();
  }

  pad(a, b) {
    a = '' + a;
    return '000000'.substring(0, b - a.length) + a;
  }

  formatYear(year) {
    const validDate = this._validate(year, this._minMonth, this._minDay, this._invalids.invalidYear);

    return (validDate.year() < 0 ? '-' : '') + this.pad(Math.abs(validDate.year()), 4);
  }

  epoch(a) {
    var validDate = this._validate(a, this._minMonth, this._minDay, this._invalids.invalidYear);

    return validDate.year() < 0 ? this._epochs[0] : this._epochs[1];
  }

  monthsInYear(date) {
    this._validate(date, this._minMonth, this._minDay, this._invalids.invalidYear);

    return 12;
  }

  monthOfYear(year, month) {
    var date = this._validate(year, month, this._minDay, this._invalids.invalidMonth);

    return (date.month() + this.monthsInYear(date) - this._firstMonth) % this.monthsInYear(date) + this._minMonth;
  }

  fromMonthOfYear(year, month) {
    var m = (month + this._firstMonth - 2 * this._minMonth) % this.monthsInYear(year) + this._minMonth;

    this._validate(year, m, this._minDay, this._invalids.invalidMonth);

    return m;
  }

  daysInYear(year) {
    var date = this._validate(year, this._minMonth, this._minDay, this._invalids.invalidYear);

    return this.leapYear(date) ? 366 : 365;
  }

  dayOfYear(yearOrDate, month, day) {
    var validDate = this._validate(yearOrDate, month, day, this._invalids.invalidDate);

    return validDate.toJD() - this.newDate(validDate.year(), this.fromMonthOfYear(validDate.year(), this._minMonth), this._minDay).toJD() + 1;
  }

  daysInWeek() {
    return 7;
  }

  dayOfWeek(yearOrDate, month, day) {
    var validDate = this._validate(yearOrDate, month, day, this._invalids.invalidDate);

    return (Math.floor(this.toJD(validDate)) + 2) % this.daysInWeek();
  }

  extraInfo(yearOrDate, month, day) {
    this._validate(yearOrDate, month, day, this._invalids.invalidDate);

    return {};
  }

  add(yearOrDate, month, day) {
    this._validate(yearOrDate, this._minMonth, this._minDay, this._invalids.invalidDate);

    return this._correctAdd(yearOrDate, this._add(yearOrDate, month, day), month, day);
  }

  _add(yearOrDate, month, day) {
    this._validateLevel++;

    if (day === 'd' || day === 'w') {
      const d = yearOrDate.fromJD(yearOrDate.toJD() + month * (day === 'w' ? this.daysInWeek() : 1));
      this._validateLevel--;
      return [d.year(), d.month(), d.day()];
    }

    try {
      const y = yearOrDate.year() + (day === 'y' ? month : 0);
      const m = yearOrDate.monthOfYear() + (day === 'm' ? month : 0);
      const d = yearOrDate.day();

      const i = a => {
        while (m < a.minMonth) {
          y--;
          m += a.monthsInYear(y);
        }

        const b = a.monthsInYear(y);

        while (m > b - 1 + a.minMonth) {
          y++;
          m -= b;
          b = a.monthsInYear(y);
        }
      };

      if (day === 'y') {
        if (yearOrDate.month() !== this.fromMonthOfYear(y, m)) {
          m = this.newDate(y, yearOrDate.month(), this._minDay).monthOfYear();
        }

        m = Math.min(m, this.monthsInYear(y));
        d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));
      } else if (day === 'm') {
        i(this);
        d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));
      }

      const j = [y, this.fromMonthOfYear(y, m), d];
      this._validateLevel--;
      return j;
    } catch (e) {
      this._validateLevel--;
      throw e;
    }
  }

  _correctAdd(a, b, c, d) {
    if (!this._hasYearZero && (d === 'y' || d === 'm')) {
      if (b[0] === 0 || a.year() > 0 !== b[0] > 0) {
        const e = {
          y: [1, 1, 'y'],
          m: [1, this.monthsInYear(-1), 'm'],
          w: [this.daysInWeek(), this.daysInYear(-1), 'd'],
          d: [1, this.daysInYear(-1), 'd']
        }[d];
        const f = c < 0 ? -1 : +1;
        b = this._add(a, c * e[0] + f * e[1], e[2]);
      }
    }

    return a.date(b[0], b[1], b[2]);
  }

  set(a, b, c) {
    this._validate(a, this._minMonth, this._minDay, this._invalids.invalidDate);

    const y = c === 'y' ? b : a.year();
    const m = c === 'm' ? b : a.month();
    const d = c === 'd' ? b : a.day();

    if (c === 'y' || c === 'm') {
      d = Math.min(d, this.daysInMonth(y, m));
    }

    return a.date(y, m, d);
  }

  toJD(c, d, e) {
    const f = this._validate(c, d, e, this._invalids.invalidDate);

    c = f.year();
    d = f.month();
    e = f.day();

    if (c < 0) {
      c++;
    }

    if (d < 3) {
      d += 12;
      c--;
    }

    const a = Math.floor(c / 100);
    const b = 2 - a + Math.floor(a / 4);
    return Math.floor(365.25 * (c + 4716)) + Math.floor(30.6001 * (d + 1)) + e + b - 1524.5;
  }

  fromJD(f) {
    const z = Math.floor(f + 0.5);
    const a = Math.floor((z - 1867216.25) / 36524.25);
    a = z + 1 + a - Math.floor(a / 4);
    const b = a + 1524;
    const c = Math.floor((b - 122.1) / 365.25);
    const d = Math.floor(365.25 * c);
    const e = Math.floor((b - d) / 30.6001);
    const g = b - d - Math.floor(e * 30.6001);
    const h = e - (e > 13.5 ? 13 : 1);
    const i = c - (h > 2.5 ? 4716 : 4715);

    if (i <= 0) {
      i--;
    }

    return this.newDate(i, h, g);
  }

}

/***/ }),

/***/ "./src/utilities/calendars/calendar-date.js":
/*!**************************************************!*\
  !*** ./src/utilities/calendars/calendar-date.js ***!
  \**************************************************/
/*! exports provided: CalendarDate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CalendarDate", function() { return CalendarDate; });
class CalendarDate {
  constructor(calendar, year, month, day) {
    this._calendar = calendar;
    this._year = year;
    this._month = month;
    this._day = day;

    if (this._calendar._validateLevel === 0 && !this._calendar.isValid(this._year, this._month, this._day)) {
      throw this._calendar._invalids.invalidDate.replace(/\{0\}/, this._calendar.name);
    }
  }

  newDate(a, b, c) {
    return this._calendar.newDate(a == null ? this : a, b, c);
  }

  year(year) {
    return arguments.length === 0 ? this._year : this.set(year, 'y');
  }

  month(month) {
    return arguments.length === 0 ? this._month : this.set(month, 'm');
  }

  day(day) {
    return arguments.length === 0 ? this._day : this.set(day, 'd');
  }

  date(year, month, day) {
    if (!this._calendar.isValid(year, month, day)) {
      throw this._calendar._invalids.invalidDate.replace(/\{0\}/, this._calendar.name);
    }

    this._year = year;
    this._month = month;
    this._day = day;
    return this;
  }

  add(time, type) {
    return this._calendar.add(this, time, type);
  }

  set(time, type) {
    return this._calendar.set(this, time, type);
  }

  compareTo(instance) {
    let comparer = this._year - instance._year;

    if (this._year === instance._year) {
      comparer = this._day - instance._day;

      if (this._month !== instance._month) {
        comparer = this.monthOfYear() - instance.monthOfYear();
      }
    }

    if (this._calendar.name !== instance._calendar.name) {
      throw this._calendar._invalids.differentCalendars.replace(/\{0\}/, this._calendar.name).replace(/\{1\}/, instance._calendar.name);
    }

    return comparer === 0 ? 0 : comparer < 0 ? -1 : +1;
  }

  toJD() {
    return this._calendar.toJD(this);
  }

  fromJD(a) {
    return this._calendar.fromJD(a);
  }

  toJSDate() {
    return this._calendar.toJSDate(this);
  }

  fromJSDate(a) {
    return this._calendar.fromJSDate(a);
  }

  pad(a, b) {
    a = '' + a;
    return '000000'.substring(0, b - a.length) + a;
  }

  toString() {
    return (this.year() < 0 ? '-' : '') + this.pad(Math.abs(this.year()), 4) + '-' + this.pad(this.month(), 2) + '-' + this.pad(this.day(), 2);
  }

  leapYear() {
    return this._calendar.leapYear(this);
  }

  epoch() {
    return this._calendar.epoch(this);
  }

  formatYear() {
    return this._calendar.formatYear(this);
  }

  monthOfYear() {
    return this._calendar.monthOfYear(this);
  }

  weekOfYear() {
    return this._calendar.weekOfYear(this);
  }

  daysInYear() {
    return this._calendar.daysInYear(this);
  }

  dayOfYear() {
    return this._calendar.dayOfYear(this);
  }

  daysInMonth() {
    return this._calendar.daysInMonth(this);
  }

  dayOfWeek() {
    return this._calendar.dayOfWeek(this);
  }

  weekDay() {
    return this._calendar.weekDay(this);
  }

  extraInfo() {
    return this._calendar.extraInfo(this);
  }

  calendar() {
    return this._calendar;
  }

}

/***/ }),

/***/ "./src/utilities/calendars/calendar.js":
/*!*********************************************!*\
  !*** ./src/utilities/calendars/calendar.js ***!
  \*********************************************/
/*! exports provided: Calendar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Calendar", function() { return Calendar; });
/* harmony import */ var _ethiopian_calender__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ethiopian-calender */ "./src/utilities/calendars/ethiopian-calender.js");
/* harmony import */ var _gregorian_calendar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gregorian-calendar */ "./src/utilities/calendars/gregorian-calendar.js");


class Calendar {
  constructor(calendarId) {
    this._calendarId = calendarId;
    this._calendar = {};
    this.getInstance();
  }

  getInstance() {
    switch (this._calendarId) {
      case 'ethiopian':
        this._calendar = new _ethiopian_calender__WEBPACK_IMPORTED_MODULE_0__["EthiopianCalendar"]();
        return this;

      default:
        this._calendar = new _gregorian_calendar__WEBPACK_IMPORTED_MODULE_1__["GregorianCalendar"]();

        if (!this._calendar) {
          throw new Error('Calendar could not be instantiated');
        }

        return this;
    }
  }

  getMonths() {
    const monthsNames = this._calendar.monthNames();

    return monthsNames.length === 13 ? monthsNames.slice(0, -1) : monthsNames;
  }

  getCurrentYear() {
    return this._calendar.today().year();
  }

  getCurrentMonth() {
    return this._calendar.today().month();
  }

  getCurrentDay() {
    return this._calendar.today().day();
  }

  getQuarterMonthOffset() {
    return this._calendar.quarterMonthOffset();
  }

  getCurrentQuarter() {
    const difference = this.getCurrentMonth() - this.getQuarterMonthOffset();
    return Math.ceil((difference > 12 ? 1 : difference) / 3);
  }

  getCurrentBiMonth() {
    return Math.ceil(this.getCurrentMonth() / 2);
  }

  getCurrentSixMonth() {
    return Math.ceil(this.getCurrentMonth() / 6);
  }

  getCurrentSixMonthApril() {
    const currentMonth = this.getCurrentMonth();
    return currentMonth >= 4 && currentMonth <= 9 ? 1 : 2;
  }

  getCurrentSixMonthNovember() {
    const currentMonth = this.getCurrentMonth();
    return currentMonth >= 5 && currentMonth <= 10 ? 2 : 1;
  }

}

/***/ }),

/***/ "./src/utilities/calendars/ethiopian-calender.js":
/*!*******************************************************!*\
  !*** ./src/utilities/calendars/ethiopian-calender.js ***!
  \*******************************************************/
/*! exports provided: EthiopianCalendar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EthiopianCalendar", function() { return EthiopianCalendar; });
/* harmony import */ var _base_calendar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base-calendar */ "./src/utilities/calendars/base-calendar.js");

class EthiopianCalendar extends _base_calendar__WEBPACK_IMPORTED_MODULE_0__["BaseCalender"] {
  constructor() {
    super();
    this._name = 'Ethiopian';
    this._jdEpoch = 1723856;
    this._gregorianEpoch = 1721426;
    this._daysPerMonth = [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 5];
    this._hasYearZero = false;
    this._minMonth = 1;
    this._firstMonth = 1;
    this._quarterMonthOffset = -2;
    this._minDay = 1;
    this._epochs = ['BEE', 'EE'];
    this._monthNames = ['Meskerem', 'Tikemet', 'Hidar', 'Tahesas', 'Tir', 'Yekatit', 'Megabit', 'Miazia', 'Genbot', 'Sene', 'Hamle', 'Nehase', 'Pagume'];
    this._monthNamesShort = ['Mes', 'Tik', 'Hid', 'Tah', 'Tir', 'Yek', 'Meg', 'Mia', 'Gen', 'Sen', 'Ham', 'Neh', 'Pag'];
    this._dayNames = ['Ehud', 'Segno', 'Maksegno', 'Irob', 'Hamus', 'Arb', 'Kidame'];
    this._dayNamesShort = ['Ehu', 'Seg', 'Mak', 'Iro', 'Ham', 'Arb', 'Kid'];
    this._dayNamesMin = ['Eh', 'Se', 'Ma', 'Ir', 'Ha', 'Ar', 'Ki'];
    this._dateFormat = 'dd/mm/yyyy';
    this._firstDay = 0;
    this._isRTL = false;
  }

  monthNames() {
    return this._monthNames;
  }

  leapYear(year) {
    const validDate = this._validate(year, this.minMonth, this.minDay, this._invalids.invalidYear);

    const validYear = validDate.year() + (validDate.year() < 0 ? 1 : 0);
    return validYear % 4 === 3 || validYear % 4 === -1;
  }

  monthsInYear(year) {
    this._validate(year, this.minMonth, this.minDay, this._invalids.invalidYear);

    return 13;
  }

  weekOfYear(year, month, day) {
    var date = this.newDate(year, month, day);
    date.add(-date.dayOfWeek(), 'd');
    return Math.floor((date.dayOfYear() - 1) / 7) + 1;
  }

  daysInMonth(a, b) {
    const validDate = this._validate(a, b, this._minDay, this._invalids.invalidMonth);

    return this._daysPerMonth[validDate.month() - 1] + (validDate.month() === 13 && this.leapYear(validDate.year()) ? 1 : 0);
  }

  weekDay(a, b, c) {
    return (this.dayOfWeek(a, b, c) || 7) < 6;
  }

  quarterMonthOffset() {
    return this._quarterMonthOffset;
  }

  fromJSDate(date) {
    const newDate = this.newDate(date.getFullYear(), date.getMonth() + 1, date.getDate());
    return this.fromJD(this.toJD(newDate.year(), newDate.month(), newDate.day()));
  }

  toJD(year, month, day) {
    const s = Math.floor(year / 4) - Math.floor((year - 1) / 4) - Math.floor(year / 100) + Math.floor((year - 1) / 100) + Math.floor(year / 400) - Math.floor((year - 1) / 400);
    const t = Math.floor((14 - month) / 12);
    const n = 31 * t * (month - 1) + (1 - t) * (59 + s + 30 * (month - 3) + Math.floor((3 * month - 7) / 5)) + day - 1;
    const j = this._gregorianEpoch + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) + Math.floor((year - 1) / 400) + n;
    return j;
  }

  fromJD(a) {
    const r = (a - this._jdEpoch) % 1461;
    const n = r % 365 + 365 * Math.floor(r / 1460);
    const year = 4 * Math.floor((a - this._jdEpoch) / 1461) + Math.floor(r / 365) - Math.floor(r / 1460);
    const month = Math.floor(n / 30) + 1;
    const day = n % 30 + 1;
    return this.newDate(year, month, day);
  }

}

/***/ }),

/***/ "./src/utilities/calendars/gregorian-calendar.js":
/*!*******************************************************!*\
  !*** ./src/utilities/calendars/gregorian-calendar.js ***!
  \*******************************************************/
/*! exports provided: GregorianCalendar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GregorianCalendar", function() { return GregorianCalendar; });
/* harmony import */ var _base_calendar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base-calendar */ "./src/utilities/calendars/base-calendar.js");

class GregorianCalendar extends _base_calendar__WEBPACK_IMPORTED_MODULE_0__["BaseCalender"] {
  constructor() {
    super();
    this._name = 'Gregorian';
    this._jdEpoch = 1721425.5;
    this._daysPerMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    this._hasYearZero = false;
    this._minMonth = 1;
    this._firstMonth = 1;
    this._minDay = 1;
    this._epochs = ['BCE', 'CE'];
    this._monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    this._dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    this._monthNamesShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    this._dayNamesShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    this._dayNamesMin = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
    this._dateFormat = 'mm/dd/yyyy';
    this._firstDay = 0;
    this._isRTL = false;
  }

  monthNames() {
    return this._monthNames;
  }

  leapYear(a) {
    const b = this._validate(a, this._minMonth, this._minDay, this._invalids.invalidYear);

    a = b.year() + (b.year() < 0 ? 1 : 0);
    return a % 4 === 0 && (a % 100 !== 0 || a % 400 === 0);
  }

  weekOfYear(year, month, day) {
    const date = this.newDate(year, month, day);
    date.add(4 - (date.dayOfWeek() || 7), 'd');
    console.log(Math.floor((date.dayOfYear() - 1) / 7) + 1);
    return Math.floor((date.dayOfYear() - 1) / 7) + 1;
  }

  daysInMonth(a, b) {
    const c = this._validate(a, b, this._minDay, this._invalids.invalidMonth);

    return this._daysPerMonth[c.month() - 1] + (c.month() === 2 && this.leapYear(c.year()) ? 1 : 0);
  }

  weekDay(a, b, c) {
    return (this.dayOfWeek(a, b, c) || 7) < 6;
  }

  quarterMonthOffset() {
    return 0;
  }

  toJD(c, d, e) {
    const f = this._validate(c, d, e, this._invalids.invalidDate);

    c = f.year();
    d = f.month();
    e = f.day();

    if (c < 0) {
      c++;
    }

    if (d < 3) {
      d += 12;
      c--;
    }

    const a = Math.floor(c / 100);
    const b = 2 - a + Math.floor(a / 4);
    return Math.floor(365.25 * (c + 4716)) + Math.floor(30.6001 * (d + 1)) + e + b - 1524.5;
  }

  fromJD(f) {
    const z = Math.floor(f + 0.5);
    let a = Math.floor((z - 1867216.25) / 36524.25);
    a = z + 1 + a - Math.floor(a / 4);
    const b = a + 1524;
    const c = Math.floor((b - 122.1) / 365.25);
    const d = Math.floor(365.25 * c);
    const e = Math.floor((b - d) / 30.6001);
    const g = b - d - Math.floor(e * 30.6001);
    const h = e - (e > 13.5 ? 13 : 1);
    const i = c - (h > 2.5 ? 4716 : 4715);

    if (i <= 0) {
      i--;
    }

    return this.newDate(i, h, g);
  }

  toJSDate(a, b, c) {
    const d = this._validate(a, b, c, this._invalids.invalidDate);

    const e = new Date(d.year(), d.month() - 1, d.day());
    e.setHours(0);
    e.setMinutes(0);
    e.setSeconds(0);
    e.setMilliseconds(0);
    e.setHours(e.getHours() > 12 ? e.getHours() + 2 : 0);
    return e;
  }

  fromJSDate(a) {
    return this.newDate(a.getFullYear(), a.getMonth() + 1, a.getDate());
  }

}

/***/ }),

/***/ "./src/utilities/dependency.js":
/*!*************************************!*\
  !*** ./src/utilities/dependency.js ***!
  \*************************************/
/*! exports provided: Dependency */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dependency", function() { return Dependency; });
/**
 * This callback type is called `processCallback`.
 *
 * @mixin
 * @callback processCallback
 * @param {Object} result
 */

/**
 * Represents a process dependency
 */
class Dependency {
  /**
   * Creates a dependency instance
   * @param {Process} process
   * @param {processCallback} processCallback
   */
  constructor(process, processCallback) {
    this.process = process;
    this.processCallback = processCallback;
  }

}

/***/ }),

/***/ "./src/utilities/fetcher.js":
/*!**********************************!*\
  !*** ./src/utilities/fetcher.js ***!
  \**********************************/
/*! exports provided: Fetcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fetcher", function() { return Fetcher; });
/* harmony import */ var _runner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./runner */ "./src/utilities/runner.js");
/* harmony import */ var _process__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./process */ "./src/utilities/process.js");
/* harmony import */ var progress_promise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! progress-promise */ "./node_modules/progress-promise/index.js");
/* harmony import */ var progress_promise__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(progress_promise__WEBPACK_IMPORTED_MODULE_2__);



/**
 * Represents the fetcher process
 *@extends Process
 */

class Fetcher extends _process__WEBPACK_IMPORTED_MODULE_1__["Process"] {
  /**
   * Creates a fethcer
   * @constructor
   */
  constructor() {
    super();
    this.parameters = {};
  }
  /**
   * Gets the URL Parameters
   * @returns {string}
   * @private
   */


  get _urlParameters() {
    let url = '';
    Object.keys(this.parameters).forEach(key => {
      if (url !== '') {
        url += '&';
      }

      if (typeof this.parameters[key] === 'string') {
        url += key + '=' + this.parameters[key];
      } else {
        Object.keys(this.parameters[key]).forEach(key2 => {
          if (url !== '') {
            url += '&';
          }

          if (this.parameters[key][key2] === '') {
            url += key + '=' + key2;
          } else {
            url += key + '=' + key2 + ':' + this.parameters[key][key2];
          }
        });
      }
    });
    return url;
  }
  /**
   * Gets the url
   * @throws Implementation Error
   */


  get url() {
    throw new Error('Should implement url generation');
  }
  /**
   * Gets the running process started
   * @returns {ProgressPromise}
   */


  get() {
    return new _runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]().getResults(this);
  }
  /**
   * Set paremeters
   * @param {Object} parameters - The parameters to be passed to the url
   * @returns {Fetcher} - Object of the fetcher
   */


  setParameters(parameters) {
    Object.keys(parameters).forEach(key => {
      this.parameters[key] = parameters[key];
    });
    return this;
  }
  /**
   * Get Dependency results
   * @returns {ProgressPromise}
   */


  getDependecyFetchResults() {
    const promises = this.dependencies.map(dependency => {
      return new _runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]().getResults(dependency.process);
    });
    return progress_promise__WEBPACK_IMPORTED_MODULE_2___default.a.all(promises);
  }

  _encode64(buff) {
    return btoa(new Uint8Array(buff).reduce((s, b) => s + String.fromCharCode(b), ''));
  }

  hash() {
    return this.url;
  }

}

/***/ }),

/***/ "./src/utilities/multi-fetcher.js":
/*!****************************************!*\
  !*** ./src/utilities/multi-fetcher.js ***!
  \****************************************/
/*! exports provided: MultiFetcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiFetcher", function() { return MultiFetcher; });
/* harmony import */ var _runner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./runner */ "./src/utilities/runner.js");
/* harmony import */ var _fetcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fetcher */ "./src/utilities/fetcher.js");


/**
 * Represents the multiple fetcher process
 *@extends Fetcher
 */

class MultiFetcher extends _fetcher__WEBPACK_IMPORTED_MODULE_1__["Fetcher"] {
  /**
   * Creates a fethcer
   * @constructor
   */
  constructor(fetchers) {
    super();
    this._fetchers = fetchers;
  }
  /**
   * Gets the Fetchers
   * @returns {array} fetchers - Array of Fetchers
   */


  get fetchers() {
    return this._fetchers;
  }
  /**
   * Gets the executed Promise
   * @returns {ProgressPromise} progressPromise - Promise which alerts progresss
   */


  get() {
    return new _runner__WEBPACK_IMPORTED_MODULE_0__["Runner"]().getAllResults(this);
  }

}

/***/ }),

/***/ "./src/utilities/period-instance.js":
/*!******************************************!*\
  !*** ./src/utilities/period-instance.js ***!
  \******************************************/
/*! exports provided: PeriodInstance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PeriodInstance", function() { return PeriodInstance; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "lodash");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _calendars_calendar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calendars/calendar */ "./src/utilities/calendars/calendar.js");


class PeriodInstance {
  constructor(calendarId, type, preferences, year) {
    this._calendarId = calendarId || 'gregorian';
    this._type = type;
    this._preferences = preferences;
    this._periods = [];
    this._calendar = new _calendars_calendar__WEBPACK_IMPORTED_MODULE_1__["Calendar"](calendarId);

    if (!this._calendar) {
      throw new Error('Calendar could not be set');
    }

    this._year = year || this._calendar.getCurrentYear();
    this._month = this._calendar.getCurrentMonth();
    this._quarter = this._calendar.getCurrentQuarter();
    this._biMonth = this._calendar.getCurrentBiMonth();
    this._sixMonth = this._calendar.getCurrentSixMonth();
    this._sixMonthApril = this._calendar.getCurrentSixMonthApril();
    this._sixMonthNovember = this._calendar.getCurrentSixMonthNovember();
    this._monthNames = this._calendar.getMonths();
    this._quarterMonthOffset = this._calendar.getQuarterMonthOffset();
  }

  get() {
    this._periods = this.getPeriods(this._type, this._year);

    if (this._preferences && this._preferences.allowFuturePeriods || this._type.indexOf('Relative') !== -1) {
      return this._periods.reverse();
    }

    return this.omitFuturePeriods(this.includeLastPeriods(this._periods, this._type, this._year), this._type).reverse();
  }

  year() {
    return this._year;
  }

  currentYear() {
    return this._calendar.getCurrentYear();
  }

  getPeriods(type, year, offset = 0) {
    let periods;

    switch (type) {
      case 'Monthly':
        {
          periods = this.getMonthlyPeriods(year, offset);
          break;
        }

      case 'Quarterly':
        {
          periods = this.getQuarterlyPeriods(year);
          break;
        }

      case 'BiMonthly':
        {
          periods = this.getBiMonthlyPeriods(year);
          break;
        }

      case 'SixMonthly':
        {
          periods = this.getSixMonthlyPeriods(year);
          break;
        }

      case 'SixMonthlyApril':
        {
          periods = this.getSixMonthlyAprilPeriods(year);
          break;
        }

      case 'SixMonthlyNovember':
        {
          periods = this.getSixMonthlyNovemberPeriods(year);
          break;
        }

      case 'Yearly':
        {
          periods = this.getYearlyPeriods(year, 'Yearly');
          break;
        }

      case 'FinancialApril':
        {
          periods = this.getYearlyPeriods(year, 'FinancialApril', 'April', 3);
          break;
        }

      case 'FinancialJuly':
        {
          periods = this.getYearlyPeriods(year, 'FinancialJuly', 'July', 6);
          break;
        }

      case 'FinancialOctober':
        {
          periods = this.getYearlyPeriods(year, 'FinancialOctober', 'Oct', 9);
          break;
        }

      case 'FinancialNovember':
        {
          periods = this.getYearlyPeriods(year, 'FinancialNovember', 'Nov', 10);
          break;
        }

      case 'RelativeMonth':
      case 'RelativeBiMonth':
      case 'RelativeQuarter':
      case 'RelativeSixMonth':
      case 'RelativeYear':
      case 'RelativeFinancialYear':
      case 'RelativeWeek':
        {
          periods = this.getRelativePeriods(type);
          break;
        }

      default:
        periods = [];
        break;
    }

    return periods;
  }

  includeLastPeriods(periods, type, year) {
    const lastYearPeriods = this.getPeriods(type, year - 1);
    const currentPeriods = periods;
    return (periods || []).map((period, periodIndex) => {
      const lastPeriod = currentPeriods[periodIndex - 1] || Object(lodash__WEBPACK_IMPORTED_MODULE_0__["last"])(lastYearPeriods);
      const newLastPeriod = {
        id: lastPeriod.id,
        name: lastPeriod.name
      };
      period.lastPeriod = newLastPeriod;
      return period;
    });
  }

  getRelativePeriods(type) {
    switch (type) {
      case 'RelativeBiMonth':
        {
          return [{
            id: 'THIS_BIMONTH',
            type,
            name: 'This Bi-month'
          }, {
            id: 'LAST_BIMONTH',
            type,
            name: 'Last Bi-month'
          }, {
            id: 'LAST_6_BIMONTHS',
            type,
            name: 'Last 6 bi-month'
          }];
        }

      case 'RelativeMonth':
        {
          return [{
            id: 'THIS_MONTH',
            type,
            name: 'This Month'
          }, {
            id: 'LAST_MONTH',
            type,
            name: 'Last Month'
          }, {
            id: 'LAST_3_MONTHS',
            type,
            name: 'Last 3 Months'
          }, {
            id: 'LAST_6_MONTHS',
            type,
            name: 'Last 6 Months'
          }, {
            id: 'LAST_12_MONTHS',
            type,
            name: 'Last 12 Months'
          }];
        }

      case 'RelativeQuarter':
        {
          return [{
            id: 'THIS_QUARTER',
            type,
            name: 'This Quarter'
          }, {
            id: 'LAST_QUARTER',
            type,
            name: 'Last Quarter'
          }, {
            id: 'LAST_4_QUARTERS',
            type,
            name: 'Last 4 Quarters'
          }];
        }

      case 'RelativeSixMonth':
        {
          return [{
            id: 'THIS_SIX_MONTH',
            type,
            name: 'This Six-month'
          }, {
            id: 'LAST_SIX_MONTH',
            type,
            name: 'Last Six-month'
          }, {
            id: 'LAST_2_SIXMONTHS',
            type,
            name: 'Last 2 Six-month'
          }];
        }

      case 'RelativeYear':
        {
          return [{
            id: 'THIS_YEAR',
            type,
            name: 'This Year'
          }, {
            id: 'LAST_YEAR',
            type,
            name: 'Last Year'
          }, {
            id: 'LAST_5_YEARS',
            type,
            name: 'Last 5 Years'
          }];
        }

      case 'RelativeFinancialYear':
        {
          return [{
            id: 'THIS_FINANCIAL_YEAR',
            type,
            name: 'This Financial Year'
          }, {
            id: 'LAST_FINANCIAL_YEAR',
            type,
            name: 'Last Financial Year'
          }, {
            id: 'LAST_5_FINANCIAL_YEARS',
            type,
            name: 'Last 5 Financial Years'
          }];
        }

      case 'RelativeWeek':
        {
          return [{
            id: 'THIS_WEEK',
            type,
            name: 'This Week'
          }, {
            id: 'LAST_WEEK',
            type,
            name: 'Last Week'
          }, {
            id: 'LAST_4_WEEKS',
            type,
            name: 'Last 4 Weeks'
          }, {
            id: 'LAST_12_WEEKS',
            type,
            name: 'last 12 Weeks'
          }, {
            id: 'LAST_52_WEEKS',
            type,
            name: 'Last 52 weeks'
          }];
        }

      default:
        return [];
    }
  }

  getMonthlyPeriods(year, offset = 0) {
    const monthPeriods = (this._monthNames || []).map((monthName, monthIndex) => {
      const monthOffset = monthIndex + 1 - offset;
      const monthYear = monthOffset > 12 ? year - 1 : year;
      const id = this.getMonthPeriodId(monthYear, monthIndex + 1);
      return {
        id,
        type: 'Monthly',
        name: `${monthName} ${monthYear}`,
        daily: this.getChildrenPeriods(id, 'Monthly', 'Daily', this._preferences),
        weekly: this.getChildrenPeriods(id, 'Monthly', 'Weekly', this._preferences)
      };
    });
    return this.getMonthsByOffset(monthPeriods, offset);
  }

  getQuarterlyPeriods(year) {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["chunk"])(this.getMonthsByOffset(this.getMonthWithYears(this._monthNames, year, this._quarterMonthOffset), this._quarterMonthOffset), 3).map((quarterMonths, quarterIndex) => {
      const id = this.getQuarterPeriodId(year, quarterIndex + 1);
      const startMonth = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["head"])(quarterMonths || []);
      const endMonth = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["last"])(quarterMonths || []);
      return {
        id,
        type: 'Quarterly',
        name: this.getPeriodNameByRange(startMonth, endMonth, year),
        daily: this.getChildrenPeriods(id, 'Quarterly', 'Daily', this._preferences),
        weekly: this.getChildrenPeriods(id, 'Quarterly', 'Weekly', this._preferences),
        monthly: this.getChildrenPeriods(id, 'Quarterly', 'Monthly', this._preferences)
      };
    });
  }

  getPeriodNameByRange(startMonth, endMonth, year) {
    return `${[startMonth.name + ` ${startMonth.year}`, endMonth.name].join(' - ')} ${endMonth.year}`;
  }

  getMonthsByOffset(months, offset) {
    if (offset === 0) {
      return months;
    }

    return [...months.slice(offset), ...months.slice(0, months.length + offset)];
  }

  getMonthWithYears(monthNames, year, offset) {
    return (monthNames || []).map((name, index) => {
      const monthOffset = index + 1 - offset;
      return {
        name,
        index,
        year: monthOffset > 12 ? year - 1 : year
      };
    });
  }

  getBiMonthlyPeriods(year) {
    return (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["chunk"])(this._monthNames || [], 2) || []).map((biMonths, biMonthIndex) => {
      const id = this.getBiMonthlyPeriodId(year, biMonthIndex + 1);
      return {
        id,
        type: 'BiMonthly',
        name: `${[Object(lodash__WEBPACK_IMPORTED_MODULE_0__["head"])(biMonths || []), Object(lodash__WEBPACK_IMPORTED_MODULE_0__["last"])(biMonths || [])].join(' - ')} ${year}`,
        daily: this.getChildrenPeriods(id, 'BiMonthly', 'Daily', this._preferences),
        weekly: this.getChildrenPeriods(id, 'BiMonthly', 'Weekly', this._preferences),
        monthly: this.getChildrenPeriods(id, 'BiMonthly', 'Monthly', this._preferences)
      };
    });
  }

  getSixMonthlyPeriods(year) {
    return (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["chunk"])(this._monthNames || [], 6) || []).map((sixMonths, sixMonthIndex) => {
      const id = this.getSixMonthlyPeriodId(year, sixMonthIndex + 1);
      return {
        id,
        type: 'SixMonthly',
        name: `${[Object(lodash__WEBPACK_IMPORTED_MODULE_0__["head"])(sixMonths || []), Object(lodash__WEBPACK_IMPORTED_MODULE_0__["last"])(sixMonths || [])].join(' - ')} ${year}`,
        daily: this.getChildrenPeriods(id, 'SixMonthly', 'Daily', this._preferences),
        weekly: this.getChildrenPeriods(id, 'SixMonthly', 'Weekly', this._preferences),
        monthly: this.getChildrenPeriods(id, 'SixMonthly', 'Monthly', this._preferences)
      };
    });
  }

  getSixMonthlyAprilPeriods(year) {
    const months = this.getMonthWithYears(this._monthNames, year + 1, -9);
    return (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["chunk"])([...months.slice(3), ...months.slice(0, 3)] || false, 6) || []).map((sixMonthApril, sixMonthAprilIndex) => {
      const id = this.getSixMonthlyPeriodId(year, sixMonthAprilIndex + 1, 'April');
      return {
        id,
        type: 'SixMonthlyApril',
        name: this.getPeriodNameByRange(Object(lodash__WEBPACK_IMPORTED_MODULE_0__["head"])(sixMonthApril || []), Object(lodash__WEBPACK_IMPORTED_MODULE_0__["last"])(sixMonthApril || []), year),
        daily: this.getChildrenPeriods(id, 'SixMonthlyApril', 'Daily', this._preferences),
        weekly: this.getChildrenPeriods(id, 'SixMonthlyApril', 'Weekly', this._preferences),
        monthly: this.getChildrenPeriods(id, 'SixMonthlyApril', 'Monthly', this._preferences)
      };
    });
  }

  getSixMonthlyNovemberPeriods(year) {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["chunk"])(this.getMonthsByOffset(this.getMonthWithYears(this._monthNames, year, -2), this._quarterMonthOffset), 6).map((sixMonthNovember, sixMonthNovemberIndex) => {
      const id = this.getSixMonthlyPeriodId(year, sixMonthNovemberIndex + 1, 'Nov');
      return {
        id,
        type: 'SixMonthlyNovember',
        name: this.getPeriodNameByRange(Object(lodash__WEBPACK_IMPORTED_MODULE_0__["head"])(sixMonthNovember || []), Object(lodash__WEBPACK_IMPORTED_MODULE_0__["last"])(sixMonthNovember || []), year),
        daily: this.getChildrenPeriods(id, 'SixMonthlyNovember', 'Daily', this._preferences),
        weekly: this.getChildrenPeriods(id, 'SixMonthlyNovember', 'Weekly', this._preferences),
        monthly: this.getChildrenPeriods(id, 'SixMonthlyNovember', 'Monthly', this._preferences)
      };
    });
  }

  getYearlyPeriods(year, type, idSuffix = '', monthIndex = -1) {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["range"])(10).map(yearIndex => {
      const periodYear = parseInt(year, 10) - yearIndex;
      const id = this.getYearlyPeriodId(periodYear, idSuffix);
      const name = this.getYearlyPeriodName(periodYear, monthIndex);
      return {
        id,
        type,
        name,
        daily: this.getChildrenPeriods(id, type, 'Daily', this._preferences),
        weekly: this.getChildrenPeriods(id, type, 'Weekly', this._preferences),
        monthly: this.getChildrenPeriods(id, type, 'Monthly', this._preferences),
        quarterly: this.getChildrenPeriods(id, type, 'Quarterly', this._preferences)
      };
    }).reverse();
  }

  omitFuturePeriods(periods, type) {
    return periods.filter(period => period.id < this.getCurrentPeriodId(type));
  }

  getCurrentPeriodId(type) {
    switch (type) {
      case 'Monthly':
        {
          return this.getMonthPeriodId(this._calendar.getCurrentYear(), this._month);
        }

      case 'Quarterly':
        {
          return this.getQuarterPeriodId(this._calendar.getCurrentYear(), this._quarter);
        }

      case 'BiMonthly':
        {
          return this.getBiMonthlyPeriodId(this._calendar.getCurrentYear(), this._biMonth);
        }

      case 'SixMonthly':
        {
          return this.getSixMonthlyPeriodId(this._calendar.getCurrentYear(), this._sixMonth);
        }

      case 'SixMonthlyApril':
        {
          return this.getSixMonthlyPeriodId(this._calendar.getCurrentYear(), this._sixmonthApril, 'April');
        }

      case 'SixMonthlyNovember':
        {
          return this.getSixMonthlyPeriodId(this._calendar.getCurrentYear(), this._sixMonthNovember, 'Nov');
        }

      case 'Yearly':
        {
          return this._calendar.getCurrentYear();
        }

      case 'FinancialApril':
        {
          const currentYear = this._calendar.getCurrentYear();

          return this.getYearlyPeriodId(this._month >= 4 ? currentYear : currentYear - 1, 'FinancialApril');
        }

      case 'FinancialJuly':
        {
          const currentYear = this._calendar.getCurrentYear();

          return this.getYearlyPeriodId(this._month >= 7 ? currentYear : currentYear - 1, 'FinancialJuly');
        }

      case 'FinancialOctober':
        {
          const currentYear = this._calendar.getCurrentYear();

          return this.getYearlyPeriodId(this._month >= 10 ? currentYear : currentYear - 1, 'FinancialOctober');
        }

      case 'FinancialNovember':
        {
          const currentYear = this._calendar.getCurrentYear();

          return this.getYearlyPeriodId(this._month >= 11 ? currentYear : currentYear - 1, 'FinancialNovember');
        }

      default:
        return undefined;
    }
  }

  getMonthPeriodId(year, monthNumber) {
    return year + (monthNumber < 10 ? `0${monthNumber}` : monthNumber).toString();
  }

  getQuarterPeriodId(year, quarterNumber) {
    return `${year}Q${quarterNumber}`;
  }

  getBiMonthlyPeriodId(year, biMonthNumber) {
    return `${year}0${biMonthNumber}B`;
  }

  getSixMonthlyPeriodId(year, sixMonthNumber, sixMonthType = '') {
    return `${year}${sixMonthType}S${sixMonthNumber}`;
  }

  getYearlyPeriodId(year, suffix = '') {
    return `${year}${suffix}`;
  }

  getYearlyPeriodName(year, monthIndex = -1) {
    if (monthIndex === -1) {
      return year.toString();
    }

    return `${this._monthNames[monthIndex]} ${year} - ${this._monthNames[monthIndex - 1]} ${year + 1}`;
  }

  getYearlyMonthIndex(type) {}

  getChildrenPeriods(parentId, parentType, childrenType, preferences) {
    let periods = [];

    switch (parentType) {
      case 'Yearly':
        {
          const year = parseInt(parentId.slice(0, 4), 10);

          if (!isNaN(year)) {
            periods = this.getPeriods(childrenType, year).reverse();
          }

          break;
        }
      // TODO Have a common method to handle children generation for combined periods

      case 'Quarterly':
        {
          const year = parseInt(parentId.slice(0, 4), 10);

          if (!isNaN(year)) {
            switch (childrenType) {
              case 'Monthly':
                {
                  const quarterNumber = parseInt(parentId.slice(-1), 10);
                  const monthPeriods = this.getPeriods(childrenType, year, this._quarterMonthOffset);
                  periods = (monthPeriods || []).filter(({}, periodIndex) => {
                    const max = quarterNumber * 3;
                    const min = max - 3;
                    return periodIndex >= min && periodIndex < max;
                  }).reverse();
                  break;
                }

              default:
                break;
            }
          }

          break;
        }

      case 'BiMonthly':
        {
          const year = parseInt(parentId.slice(0, 4), 10);

          if (!isNaN(year)) {
            switch (childrenType) {
              case 'Monthly':
                {
                  const biMonthlyNumber = parseInt(parentId.slice(4), 10);
                  const monthPeriods = this.getPeriods(childrenType, year, 0);
                  periods = (monthPeriods || []).filter(({}, periodIndex) => {
                    const max = biMonthlyNumber * 2;
                    const min = max - 2;
                    return periodIndex >= min && periodIndex < max;
                  }).reverse();
                  break;
                }

              default:
                break;
            }
          }

          break;
        }

      case 'SixMonthly':
        {
          const year = parseInt(parentId.slice(0, 4), 10);

          if (!isNaN(year)) {
            switch (childrenType) {
              case 'Monthly':
                {
                  const sixMonthlyNumber = parseInt(parentId.slice(-1), 10);
                  const monthPeriods = this.getPeriods(childrenType, year, 0);
                  periods = (monthPeriods || []).filter(({}, periodIndex) => {
                    const max = sixMonthlyNumber * 6;
                    const min = max - 6;
                    return periodIndex >= min && periodIndex < max;
                  }).reverse();
                  break;
                }

              default:
                break;
            }
          }

          break;
        }

      default:
        break;
    }

    if (preferences && preferences.childrenPeriodSortOrder === 'ASC') {
      return periods.reverse();
    }

    return periods;
  }

}

/***/ }),

/***/ "./src/utilities/process.js":
/*!**********************************!*\
  !*** ./src/utilities/process.js ***!
  \**********************************/
/*! exports provided: Process */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Process", function() { return Process; });
/**
 * This is the representation of the processor
 */
class Process {
  /**
   * Creates a processor
   * @constructor
   */
  constructor() {
    this.postProcessors = [];
    this.dependencies = [];
  }
  /**
   * Checks if processor has dependencies
   * @returns {boolean} - Boolean value of the result
   */


  hasDependencies() {
    return this.dependencies.length > 0;
  }
  /**
   * Adds dependency to the processor
   * @param {Dependency} dependency - The
   * @deprecated Use addPreProcess
   * @returns {Process}
   */


  preProcess(dependency) {
    this.dependencies.push(dependency);
    return this;
  }
  /**
   * Adds dependency to the processor
   * @param {Dependency} dependency
   * @returns {Process}
   */


  addPreProcess(dependency) {
    this.dependencies.push(dependency);
    return this;
  }
  /**
   * Adds callback process the output process
   * @param callback
   * @deprecated Use addPostProcess
   * @returns {Process}
   */


  postProcess(callback) {
    this.postProcessors.push(callback);
    return this;
  }
  /**
   * Adds callback process the output process
   * @param callback
   * @returns {Process}
   */


  addPostProcess(callback) {
    this.postProcessors.push(callback);
    return this;
  }
  /**
   * Performs pre process
   * @returns {Process}
   */


  performPreProcess() {
    this.dependencies.forEach(dependency => {
      dependency.processCallback(dependency.process._results, this);
    });
    return this;
  }
  /**
   * Performs post process after the process has ended
   * @param {Object} data
   * @returns {Object}
   */


  performPostProcess(data) {
    this._results = data;
    let dataToProcess = data;
    this.postProcessors.forEach(callback => {
      dataToProcess = callback(dataToProcess);
    });
    return dataToProcess;
  }

}

/***/ }),

/***/ "./src/utilities/runner.js":
/*!*********************************!*\
  !*** ./src/utilities/runner.js ***!
  \*********************************/
/*! exports provided: Runner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Runner", function() { return Runner; });
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var axios_lib_adapters_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios/lib/adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
/* harmony import */ var axios_lib_adapters_http__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios_lib_adapters_http__WEBPACK_IMPORTED_MODULE_1__);


 // import { ProgressPromise } from './progress-promise';

let _instance;
/**
 * Runner represents the process which will schedule and run operations of the processes
 */


class Runner {
  /**
   * Initiates the runner singleton instance
   * @param configurations
   */
  static initiateRunner(configurations) {
    if (!Runner.instance) {
      this.config = configurations;
      this.cache = {};
      _instance = this;
    }
  }
  /**
   * Get the Runner instance
   * @returns {Runner}
   */


  get instance() {
    return _instance;
  }
  /**
   * Set the configuration
   * @param configurations
   */


  set config(configurations) {
    this.config = configurations;
  }
  /**
   * Get the configurations
   * @returns {*}
   */


  get config() {
    return this.config;
  }
  /**
   * This callback type is called `resolveCallback`.
   *
   * @callback resolveCallback
   * @param {Object} responseResult
   */

  /**
   * This callback type is called `rejectCallback`.
   *
   * @callback rejectCallback
   * @param {Error} error
   */

  /**
   * Fetches the data from the fetcher
   * @param {Fetcher} fetcher
   * @param {resolveCallback} resolve
   * @param {rejectCallback} reject
   * @private
   */


  _fetch(fetcher, resolve, reject) {
    if (!_instance) {
      let error = 'Configuration not set please configure function ' + 'analytics eg {baseUrl:"dhis_base_url", username:"username", ' + 'password:"password"}';
      throw Error(error);
    }

    let hashed = fetcher.hash();

    if (!_instance.cache[hashed]) {
      _instance.cache[hashed] = {
        finished: false,
        resolutions: []
      };
      const config = {
        url: _instance.config.baseUrl + fetcher.url,
        method: 'get',
        adapter: typeof process !== 'undefined' ? axios_lib_adapters_http__WEBPACK_IMPORTED_MODULE_1___default.a : axios_lib_adapters_http__WEBPACK_IMPORTED_MODULE_1___default.a
      };

      if (_instance.config.username && _instance.config.password) {
        config.auth = {
          username: _instance.config.username,
          password: _instance.config.password
        };
      }

      axios__WEBPACK_IMPORTED_MODULE_0___default.a.request(config).then(results => {
        _instance.cache[hashed].data = results.data;
        resolve(fetcher.performPostProcess(JSON.parse(JSON.stringify(_instance.cache[hashed].data))));

        _instance.cache[hashed].resolutions.forEach(resolution => {
          resolution(fetcher.performPostProcess(JSON.parse(JSON.stringify(_instance.cache[hashed].data))));
        });

        _instance.cache[hashed].finished = true;
      }, err => {
        reject(err);
      });
    } else {
      if (!_instance.cache[hashed].finished) {
        _instance.cache[hashed].resolutions.push(resolve);
      } else {
        resolve(fetcher.performPostProcess(JSON.parse(JSON.stringify(_instance.cache[hashed].data))));
      }
    }
  }
  /**
   * Fetches data related to a fetcher
   * @param {Fetcher} fetcher
   * @returns {ProgressPromise}
   */


  getResults(fetcher) {
    if (fetcher._fetchers) {
      // If is a multifetcher
      return this.getAllResults(fetcher);
    }

    return new Promise((resolve, reject) => {
      if (fetcher.hasDependencies()) {
        fetcher.getDependecyFetchResults().then(() => {
          fetcher.performPreProcess();

          this._fetch(fetcher, resolve, reject);
        }).catch(err => {
          console.log(err);
          reject();
        });
      } else {
        this._fetch(fetcher, resolve, reject);
      }
    });
  }
  /**
   * Fetches data for multiple fetchers
   * @param {MultiFetcher} multifetcher
   * @returns {Promise}
   */


  getAllResults(multifetcher) {
    return new Promise((resolve, reject) => {
      const promises = multifetcher.fetchers.map(fetcher => new Runner().getResults(fetcher));
      return Promise.all(promises).then(results => {
        resolve(multifetcher.performPostProcess(results));
      }).catch(err => {
        reject(err);
      });
    });
  }

}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "lodash":
/*!*************************************************************************************!*\
  !*** external {"commonjs":"lodash","commonjs2":"lodash","amd":"lodash","root":"_"} ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_lodash__;

/***/ })

/******/ });
});
//# sourceMappingURL=function-analytics.min.js.map