!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("function-analytics",[],t):"object"==typeof exports?exports["function-analytics"]=t():e["function-analytics"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=29)}([function(e,t,r){"use strict";var n=r(6),s=r(12),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.call(null,e[s],s,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:s,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return a(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,s=arguments.length;n<s;n++)c(arguments[n],r);return t},extend:function(e,t,r){return c(t,function(t,s){e[s]=r&&"function"==typeof t?n(t,r):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){"use strict";(function(e){r.d(t,"a",function(){return f});var n=r(3),s=r.n(n),o=r(10),i=r.n(o),a=r(2),u=r.n(a);let c;class f{static initiateRunner(e){f.instance||(this.config=e,this.cache={},c=this)}get instance(){return c}set config(e){this.config=e}get config(){return this.config}_fetch(e,t,r){if(!c){throw Error('Configration not set please configre function analytics eg {baseUrl:"dhis_base_url", username:"username", password:"password"}')}const n={url:c.config.baseUrl+e.url,method:"get",adapter:u.a};c.config.username&&c.config.password&&(n.auth={username:c.config.username,password:c.config.password}),i.a.request(n).then(r=>{t(e.performPostProcess(r.data))},e=>{r(e)})}getResults(e){if(e._fetchers)return this.getAllResults(e);let t=e.hash();return c.cache[t]||(c.cache[t]=new s.a((t,r,n)=>{e.hasDependencies()?e.getDependecyFetchResults().then(()=>{e.performPreProcess(),this._fetch(e,t,r)}).catch(e=>{console.log("Errrrrrrrrrr:",e),r()}):this._fetch(e,t,r)})),c.cache[t]}getAllResults(e){return new s.a((t,r,n)=>{const o=e.fetchers.map(e=>(new f).getResults(e));return s.a.all(o).then(r=>{t(e.performPostProcess(r))}).catch(e=>{r(e)})})}}}).call(this,r(5))},function(e,t,r){"use strict";var n=r(0),s=r(15),o=r(17),i=r(18),a=r(19),u=r(7),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||r(20);e.exports=function(e){return new Promise(function(t,f){var h=e.data,l=e.headers;n.isFormData(h)&&delete l["Content-Type"];var p=new XMLHttpRequest,d="onreadystatechange",m=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||a(e.url)||(p=new window.XDomainRequest,d="onload",m=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var g=e.auth.username||"",y=e.auth.password||"";l.Authorization="Basic "+c(g+":"+y)}if(p.open(e.method.toUpperCase(),o(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[d]=function(){if(p&&(4===p.readyState||m)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?i(p.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:r,config:e,request:p};s(t,f,n),p=null}},p.onerror=function(){f(u("Network Error",e,null,p)),p=null},p.ontimeout=function(){f(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},n.isStandardBrowserEnv()){var w=r(21),v=(e.withCredentials||a(e.url))&&e.xsrfCookieName?w.read(e.xsrfCookieName):void 0;v&&(l[e.xsrfHeaderName]=v)}if("setRequestHeader"in p&&n.forEach(l,function(e,t){void 0===h&&"content-type"===t.toLowerCase()?delete l[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),f(e),p=null)}),void 0===h&&(h=null),p.send(h)})}},function(e,t,r){"use strict";const n=Symbol?Symbol():"__listeners";class s extends Promise{constructor(e){super((t,r)=>e(t,r,e=>{try{return this[n].forEach(t=>t(e))}catch(e){r(e)}})),this[n]=[]}progress(e){if("function"!=typeof e)throw new Error("PROGRESS_REQUIRES_FUNCTION");return this[n].push(e),this}static all(e){const t=new Array(e.length),r=e.length;let n=0;return new s((s,o,i)=>{e.forEach((e,a)=>{e.then(e=>{t[a]=e,t.proportion=++n/r,i(t),n===r&&s(t)}).catch(o)})})}static sequence(e,t){const r=[],n=e.length;let o=0;return new s((s,i,a)=>{!function u(){t.call(null,e[r.length]).then(e=>{r.push(e),r.proportion=++o/n,a(r),r.length===n?s(r):u()}).catch(i)}()})}}e.exports=s},function(e,t,r){"use strict";(function(t){var n=r(0),s=r(14),o={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,u={adapter:("undefined"!=typeof XMLHttpRequest?a=r(2):void 0!==t&&(a=r(2)),a),transformRequest:[function(e,t){return s(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],function(e){u.headers[e]={}}),n.forEach(["post","put","patch"],function(e){u.headers[e]=n.merge(o)}),e.exports=u}).call(this,r(5))},function(e,t){var r,n,s=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var u,c=[],f=!1,h=-1;function l(){f&&u&&(f=!1,u.length?c=u.concat(c):h=-1,c.length&&p())}function p(){if(!f){var e=a(l);f=!0;for(var t=c.length;t;){for(u=c,c=[];++h<t;)u&&u[h].run();h=-1,t=c.length}u=null,f=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function m(){}s.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new d(e,t)),1!==c.length||f||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=m,s.addListener=m,s.once=m,s.off=m,s.removeListener=m,s.removeAllListeners=m,s.emit=m,s.prependListener=m,s.prependOnceListener=m,s.listeners=function(e){return[]},s.binding=function(e){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},function(e,t,r){"use strict";var n=r(16);e.exports=function(e,t,r,s,o){var i=new Error(e);return n(i,t,r,s,o)}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t,r){e.exports=r(11)},function(e,t,r){"use strict";var n=r(0),s=r(6),o=r(13),i=r(4);function a(e){var t=new o(e),r=s(o.prototype.request,t);return n.extend(r,o.prototype,t),n.extend(r,t),r}var u=a(i);u.Axios=o,u.create=function(e){return a(n.merge(i,e))},u.Cancel=r(9),u.CancelToken=r(27),u.isCancel=r(8),u.all=function(e){return Promise.all(e)},u.spread=r(28),e.exports=u,e.exports.default=u},function(e,t){function r(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(r(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&r(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,r){"use strict";var n=r(4),s=r(0),o=r(22),i=r(23);function a(e){this.defaults=e,this.interceptors={request:new o,response:new o}}a.prototype.request=function(e){"string"==typeof e&&(e=s.merge({url:arguments[0]},arguments[1])),(e=s.merge(n,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[i,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)r=r.then(t.shift(),t.shift());return r},s.forEach(["delete","get","head","options"],function(e){a.prototype[e]=function(t,r){return this.request(s.merge(r||{},{method:e,url:t}))}}),s.forEach(["post","put","patch"],function(e){a.prototype[e]=function(t,r,n){return this.request(s.merge(n||{},{method:e,url:t,data:r}))}}),e.exports=a},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t){n.forEach(e,function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])})}},function(e,t,r){"use strict";var n=r(7);e.exports=function(e,t,r){var s=r.config.validateStatus;r.status&&s&&!s(r.status)?t(n("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},function(e,t,r){"use strict";e.exports=function(e,t,r,n,s){return e.config=t,r&&(e.code=r),e.request=n,e.response=s,e}},function(e,t,r){"use strict";var n=r(0);function s(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var o;if(r)o=r(t);else if(n.isURLSearchParams(t))o=t.toString();else{var i=[];n.forEach(t,function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),i.push(s(t)+"="+s(e))}))}),o=i.join("&")}return o&&(e+=(-1===e.indexOf("?")?"?":"&")+o),e}},function(e,t,r){"use strict";var n=r(0),s=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,o,i={};return e?(n.forEach(e.split("\n"),function(e){if(o=e.indexOf(":"),t=n.trim(e.substr(0,o)).toLowerCase(),r=n.trim(e.substr(o+1)),t){if(i[t]&&s.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([r]):i[t]?i[t]+", "+r:r}}),i):i}},function(e,t,r){"use strict";var n=r(0);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function s(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=s(window.location.href),function(t){var r=n.isString(t)?s(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function s(){this.message="String contains an invalid character"}s.prototype=new Error,s.prototype.code=5,s.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,r,o=String(e),i="",a=0,u=n;o.charAt(0|a)||(u="=",a%1);i+=u.charAt(63&t>>8-a%1*8)){if((r=o.charCodeAt(a+=.75))>255)throw new s;t=t<<8|r}return i}},function(e,t,r){"use strict";var n=r(0);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,s,o,i){var a=[];a.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(s)&&a.push("path="+s),n.isString(o)&&a.push("domain="+o),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";var n=r(0);function s(){this.handlers=[]}s.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},s.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},s.prototype.forEach=function(e){n.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=s},function(e,t,r){"use strict";var n=r(0),s=r(24),o=r(8),i=r(4),a=r(25),u=r(26);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!a(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=s(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),n.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||i.adapter)(e).then(function(t){return c(e),t.data=s(t.data,t.headers,e.transformResponse),t},function(t){return o(t)||(c(e),t&&t.response&&(t.response.data=s(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t,r){return n.forEach(r,function(r){e=r(e,t)}),e}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var n=r(9);function s(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var r=this;e(function(e){r.reason||(r.reason=new n(e),t(r.reason))})}s.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},s.source=function(){var e;return{token:new s(function(t){e=t}),cancel:e}},e.exports=s},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){"use strict";r.r(t);var n=r(1);class s{constructor(){this.postProcessors=[],this.dependencies=[]}hasDependencies(){return this.dependencies.length>0}preProcess(e){return this.dependencies.push(e),this}addPreProcess(e){return this.dependencies.push(e),this}postProcess(e){return this.postProcessors.push(e),this}addPostProcess(e){return this.postProcessors.push(e),this}performPreProcess(){return this.dependencies.forEach(e=>{e.processCallback(e.process._results,this)}),this}performPostProcess(e){this._results=e;let t=e;return this.postProcessors.forEach(e=>{t=e(t)}),t}}var o=r(3),i=r.n(o);class a extends s{constructor(){super(),this.parameters={}}get _urlParameters(){let e="";return Object.keys(this.parameters).forEach(t=>{""!==e&&(e+="&"),"string"==typeof this.parameters[t]?e+=t+"="+this.parameters[t]:Object.keys(this.parameters[t]).forEach(r=>{""!==e&&(e+="&"),""===this.parameters[t][r]?e+=t+"="+r:e+=t+"="+r+":"+this.parameters[t][r]})}),e}get url(){throw new Error("Should implement url generation")}get(){return(new n.a).getResults(this)}setParameters(e){return Object.keys(e).forEach(t=>{this.parameters[t]=e[t]}),this}getDependecyFetchResults(){const e=this.dependencies.map(e=>(new n.a).getResults(e.process));return i.a.all(e)}_encode64(e){return btoa(new Uint8Array(e).reduce((e,t)=>e+String.fromCharCode(t),""))}hash(){return this.url}}class u{constructor(e,t,r){this.row=e,this.headers=t,this.metaData=r}dimension(e){var t=-1,r="";return this.headers.forEach((r,n)=>{r.name===e&&(t=n)}),this.metaData.names?r=this.metaData.names[this.row[t]]:this.metaData.items&&(r=this.metaData.items[this.row[t]]?this.metaData.items[this.row[t]].name:void 0),{id:this.row[t],name:r,path:this.metaData.ouHierarchy&&void 0!==this.metaData.ouHierarchy[this.row[t]]?this.metaData.ouHierarchy[this.row[t]]:void 0}}get dx(){return this.dimension("dx")}get pe(){return this.dimension("pe")}get ou(){return this.dimension("ou")}get value(){return this.dimension("value").id}}class c{constructor(e){this._data=e}get headers(){return this._data.headers}get metaData(){return this._data.metaData}get rows(){let e=[];return this._data.rows.forEach(t=>{e.push(new u(t,this.headers,this.metaData))}),e}getDimensionDetailsByName(e){var t=[];return this.metaData.dimensions&&this.metaData.dimensions[e].forEach(e=>{t.push(this.getDimensionDetails(e))}),t}get rows(){let e=[];return this._data.rows.forEach(t=>{e.push(new u(t,this.headers,this.metaData))}),e}getDimensionDetails(e){var t="";return this.metaData.names?t=this.metaData.names[e]:this.metaData.items&&(t=this.metaData.items[e]?this.metaData.items[e].name:void 0),{id:e,name:t,path:this.metaData.ouHierarchy&&void 0!==this.metaData.ouHierarchy[e]?this.metaData.ouHierarchy[e]:void 0}}get height(){return this._data.height}get width(){return this._data.width}}class f extends a{constructor(e=25){super(),"boolean"==typeof e&&(e=e?25:26),this.parameters.dimension={},this.postProcess(t=>this.standardizeAnalytics(t,e))}setData(e){return this.setDimension("dx",e),this}setPeriod(e){return this.setDimension("pe",e),this}setOrgUnit(e){return this.setDimension("ou",e),this}setSelections(e){return this.setPeriod(e.pe),this.setOrgUnit(e.ou),void 0!==e.rule.json.data&&this.setData(e.rule.json.data),void 0!==e.dimensions&&Array.isArray(e.dimensions)&&e.dimensions.forEach(function(e){if(Array.isArray(e.items)){let t="";e.items.forEach(function(e){t.length>0?t+=";"+e:t+=e}),this.setDimension(e.id,t)}}),this}setDimension(e,t){return this.parameters.dimension[e]=t||"",this}standardizeAnalytics(e,t=25){if("boolean"==typeof t&&(t=t?25:26),e.count)return e;let r={headers:[],metaData:{dimensions:{},names:{},dx:[],pe:[],ou:[],co:[]},rows:[]};if(e){if(e.headers&&e.headers.forEach(e=>{try{let t=e;r.headers.push(t)}catch(e){console.warn("Invalid header object")}}),e.metaData)try{let n=this.getSanitizedAnalyticsMetadata(e.metaData,t);r.metaData=n}catch(e){console.warn("Invalid metadata object")}e.rows&&(r.rows=e.rows)}return r.height=e.height,r.width=e.width,new c(r)}getSanitizedAnalyticsMetadata(e,t){let r={};return e&&(e.ouHierarchy&&(r.ouHierarchy=e.ouHierarchy),t<26?(r.names={},e.names?r.names=e.names:e.items&&Object.keys(e.items).forEach(t=>{r.names[t]=e.items[t].name}),e.dimensions&&Object.keys(e.dimensions).forEach(t=>{r[t]=e.dimensions[t]})):(r.items={},e.items?r.items=e.items:e.names&&Object.keys(e.items).forEach(t=>{e.items[t]={name:e.names[t]}}),e.dimensions?r.dimensions=e.dimensions:(r.dimensions={},Object.keys(e).forEach(t=>{-1===["names","items","dimensions"].indexOf(t)&&(r.dimensions[t]=e[t])})))),r}get url(){return"analytics?"+this._urlParameters}}const h=Symbol?Symbol():"__listeners";class l extends Promise{constructor(e){super((t,r)=>e(t,r,e=>{try{return this[h].forEach(t=>t(e))}catch(e){r(e)}})),this[h]=[]}progress(e){if("function"!=typeof e)throw new Error("PROGRESS_REQUIRES_FUNCTION");return this[h].push(e),this}static all(e){const t=new Array(e.length),r=e.length;let n=0;return new l((s,o,i)=>{e.forEach((e,a)=>{e.then(e=>{t[a]=e,t.proportion=++n/r,i(t),n===r&&s(t)}).catch(o)})})}static sequence(e,t){const r=[],n=e.length;let s=0;return new l((o,i,a)=>{!function u(){t.call(null,e[r.length]).then(e=>{r.push(e),r.proportion=++s/n,a(r),r.length===n?o(r):u()}).catch(i)}()})}}class p extends a{constructor(e){super(),this._fetchers=e}get fetchers(){return this._fetchers}get(){return(new n.a).getAllResults(this)}}r.d(t,"Fn",function(){return d});let d={Promise:l,Analytics:f,EventAnalytics:class extends f{setProgram(e){return this.program=e,this}get url(){return"analytics/events/query/"+this.program+"?"+this._urlParameters}},AnalyticsResult:c,IdentifiableObject:class extends a{constructor(e){super(),this._filters=[],this.objectName=e}get name(){return this.objectName}where(e,t,r){return this._filters.push({right:e,operator:t,left:r}),this}get url(){var e=this._urlParameters;return this._filters.forEach(t=>{""!==e&&(e+="&"),e+="filter="+t.right,"=="===t.operator?e+=":eq:"+t.left:"<"===t.operator?e+=":lt:"+t.left:"<="===t.operator?e+=":le:"+t.left:">"===t.operator?e+=":gt:"+t.left:">="===t.operator?e+=":ge:"+t.left:"<>"===t.operator?e+=":!eq:"+t.left:"in"===t.operator||"!in"===t.operator?e+=":"+t.operator+":["+t.left+"]":t.left?e+=":"+t.operator+":"+t.left:e+=":"+t.operator}),this.name+".json?"+e}},SQLViewData:class extends a{constructor(e){super(),this._id=e,this.parameters.var={}}setVariable(e,t){return this.parameters.var[e]=t||"",this}get url(){return"sqlViews/"+this._id+"/data.json?"+this._urlParameters}},Runner:n.a,Dependency:class{constructor(e,t){this.process=e,this.processCallback=t}},MultiFetcher:p,all:e=>new p(e),init:e=>{n.a.initiateRunner(e)}};"undefined"!=typeof window&&(window.Fn=d)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,